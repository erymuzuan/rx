@using Newtonsoft.Json
@model Bespoke.Sph.Web.ViewModels.TemplateFormViewModel

@{
    Layout = null;
    var setting = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All, Formatting = Formatting.Indented };
}
<script src="~/App/objectbuilders.js"></script>
<script type="text/javascript" data-script="true">

    /// <reference path="../../Scripts/jquery-2.0.3.intellisense.js" />
    /// <reference path="../../Scripts/knockout-2.3.0.debug.js" />
    /// <reference path="../../Scripts/knockout.mapping-latest.debug.js" />
    /// <reference path="../../Scripts/require.js" />
    /// <reference path="../../Scripts/underscore.js" />
    /// <reference path="../../Scripts/moment.js" />
    /// <reference path="../services/datacontext.js" />
    /// <reference path="../services/domain.g.js" />
    /// <reference path="../../Scripts/bootstrap.js" />



    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router, objectbuilders.system],
        function (context, logger, router, system) {

            var activate = function () {
                var elements = @Html.Raw(JsonConvert.SerializeObject(Model.FormElements,setting));
                vm.formElements(elements.$values);
            },
                viewAttached = function(view) {

                    var fd = ko.unwrap(vm.activity().FormDesign);

                    var dropDown = function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        var button = $(this);
                        button.parent().addClass("open")
                            .find("input:first").focus()
                            .select();
                    };

                    // Fix input element click problem
                    $(view).on('click mouseup mousedown', '.dropdown-menu input, .dropdown-menu label',
                        function (e) {
                            e.stopPropagation();
                        });
                    $('#template-form-designer').on('click', 'button.dropdown-toggle', dropDown);


                    //toolbox item clicked
                    $('#add-field').on("click", 'a', function (e) {
                        e.preventDefault();
                        _(fd.FormElementCollection()).each(function (f) {
                            f.isSelected(false);
                        });

                        // clone
                        var fe = ko.mapping.fromJS(ko.mapping.toJS(ko.dataFor(this)));
                        fe.isSelected = ko.observable(true);
                        fe.Label("Label " + fd.FormElementCollection().length);
                        fe.CssClass("");
                        fe.Visible("true");
                        fe.Size("input-large");
                        fe.ElementId(system.guid());

                        fd.FormElementCollection.push(fe);
                        vm.selectedFormElement(fe);


                    });

                    // kendoEditor
                    $('#template-form-designer').on('click', 'textarea', function () {
                        var $editor = $(this);
                        var kendoEditor = $editor.data("kendoEditor");
                        if (!kendoEditor) {
                            var htmlElement = ko.dataFor(this);
                            $editor.kendoEditor({
                                change:function() {
                                    htmlElement.Text(this.value());
                                }
                            });

                        }
                    }
                    );
                    $.getScript('/Scripts/jquery-ui-1.10.3.custom.min.js')// only contains UI core and interactions API
                        .done(function () {

                            var initDesigner = function () {
                                $('#template-form-designer>form').sortable({
                                    items: '>div',
                                    placeholder: 'ph',
                                    helper: 'original',
                                    dropOnEmpty: true,
                                    forcePlaceholderSize: true,
                                    forceHelperSize: false,
                                    receive: receive
                                });

                            },
                                receive = function (evt, ui) {
                                    var elements = _($('#template-form-designer>form>div')).map(function (div) {
                                        return ko.dataFor(div);
                                    });
                                    var fe = ko.dataFor(ui.item[0]);
                                    fe.isSelected = ko.observable(true);
                                    elements.splice(2, 0, fe);
                                    $('#template-form-designer>form').sortable("destroy");


                                    fd.FormElementCollection(elements);
                                };

                            initDesigner();
                            $('#add-field>ul>li').draggable({
                                helper: 'clone',
                                connectToSortable: "#template-form-designer>form"
                            });
                        });
                    
                    $('section.context-action-panel').on('click', 'buton.close', function() {
                        $(this).parents('div.context-action').hide();
                    });
                },
            okClick = function (data, ev) {
                if (bespoke.utils.form.checkValidity(ev.target)) {
                    
                    var fd = ko.unwrap(vm.activity().FormDesign);
                    // get the sorted element
                    var elements = _($('#template-form-designer>form>div')).map(function (div) {
                        return ko.dataFor(div);
                    });
                    fd.FormElementCollection(elements);

                    this.modal.close("OK");
                }

            },
                cancelClick = function () {
                    this.modal.close("Cancel");
                },
            selectFormElement = function (fe) {
                
                var fd = ko.unwrap(vm.activity().FormDesign);
                _(fd.FormElementCollection()).each(function (f) {
                    f.isSelected(false);
                });
                fe.isSelected(true);
                vm.selectedFormElement(fe);
            },
            removeFormElement = function (fe) {
                var fd = ko.unwrap(vm.activity().FormDesign);
                fd.FormElementCollection.remove(fe);
            };

            var vm = {
                viewAttached: viewAttached,
                activate: activate,
                formElements: ko.observableArray(),
                selectedFormElement: ko.observable(),
                selectFormElement : selectFormElement,
                removeFormElement : removeFormElement,
                activity: ko.observable(new bespoke.sph.domain.ScreenActivity()),
                wd : ko.observable(new bespoke.sph.domain.WorkflowDefinition(system.guid())),
                okClick: okClick,
                cancelClick: cancelClick
            };

            vm.activity.subscribe(function(screen) {
                var fd = ko.unwrap(screen.FormDesign);
                _(fd.FormElementCollection()).each(function(v) {
                    v.isSelected = ko.observable(false);
                });
            });


            return vm;

        });


</script>
