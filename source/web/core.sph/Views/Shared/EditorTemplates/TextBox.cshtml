@using System.Globalization
@model Bespoke.Sph.Domain.TextBox
@{
    var required = (Model.IsRequired || Model.FieldValidation.IsRequired) ? "required" : null;
    var maxLength = (Model.FieldValidation.MaxLength > 0 ? Model.FieldValidation.MaxLength.ToString(CultureInfo.InvariantCulture) : null);
    var pattern = (string.IsNullOrWhiteSpace(Model.FieldValidation.Pattern) ? null : Model.FieldValidation.Pattern);
}
@if (string.IsNullOrWhiteSpace(Model.Enable))
{
    Model.Enable = "true";
}

@functions
{

    public static IHtmlString @Attribute(string value, string attr)
    {
        if (string.IsNullOrWhiteSpace(value))
            return new HtmlString("");
        return new HtmlString(string.Format("{0}=\"{1}\"", attr, value));
    }

}

@if (Model.IsCompact)
{

    <input @required class="@(Model.CssClass + " form-control " + Model.Size)" title="@Model.Tooltip"
           data-bind="@(Html.Raw(Model.GetKnockoutBindingExpression()))"
           id="@Model.ElementId" type="text" name="@Model.Path" maxlength="@maxLength"
           pattern="@Html.Raw(pattern)" />
}
else
{
    <div data-bind="visible:@Model.Visible" class="form-group">
        <label for="@Model.ElementId" class="@Model.LabelCssClass">@Model.Label</label>
        <div class="@Model.InputPanelCssClass">
            <input @required class="@(Model.CssClass + " form-control " + Model.Size)" title="@Model.Tooltip"
                   data-bind="@(Html.Raw(Model.GetKnockoutBindingExpression()))"
                   @Attribute(maxLength, "maxlength")
                   @Attribute(pattern, "pattern")
                   id="@Model.ElementId" type="text" name="@Model.Path" />
        </div>
        @if (!string.IsNullOrWhiteSpace(Model.HelpText))
        {
            <span class="help-block">@Model.HelpText</span>
        }
    </div>

}