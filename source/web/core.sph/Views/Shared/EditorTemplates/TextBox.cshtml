@using Bespoke.Sph.Domain
@model Bespoke.Sph.Domain.TextBox
@{
    var required = (Model.IsRequired || Model.FieldValidation.IsRequired) ? "required" : null;
    var maxLength = Model.FieldValidation.MaxLength;
    var pattern = (string.IsNullOrWhiteSpace(Model.FieldValidation.Pattern) ? null : Model.FieldValidation.Pattern);
    var originalPath = Model.Path.ToEmptyString().Replace("().", ".");
}
@if (string.IsNullOrWhiteSpace(Model.Enable))
{
    Model.Enable = "true";
}

@functions
{

    public static IHtmlString @Attribute(string value, string attr)
    {
        if (string.IsNullOrWhiteSpace(value))
            return new HtmlString("");
        return new HtmlString($"{attr}=\"{value}\"");
    }

    public static IHtmlString @Attribute(int? value, string attr)
    {
        if (null == value)
            return new HtmlString("");
        return new HtmlString($"{attr}=\"{value}\"");
    }

}

@if (Model.IsCompact)
{

    <input @required class="@(Model.CssClass + " form-control " + Model.Size)" title="@Model.Tooltip"
            data-bind="@(Html.Raw(Model.GetKnockoutBindingExpression()))"
            @Html.Raw(Model.FieldValidation.GetHtmlAttributes())
            @Attribute(Model.ElementId, "id") 
            type="text" 
            name="@originalPath" 
            @Attribute(maxLength, "maxlength")
            @Attribute(pattern, "pattern") />
}
else
{
    <div data-bind="visible:@Model.Visible" class="form-group">
        <label data-i18n="@Model.Label" for="@Model.ElementId" class="@Model.LabelCssClass">@Model.Label</label>
        <div class="@Model.InputPanelCssClass">
            <input @required class="@(Model.CssClass + " form-control " + Model.Size)" title="@Model.Tooltip"
                   data-bind="@(Html.Raw(Model.GetKnockoutBindingExpression()))"
                   @Attribute(maxLength, "maxlength")
                   @Attribute(pattern, "pattern")
                   @Html.Raw(Model.FieldValidation.GetHtmlAttributes())
                   @Attribute(Model.ElementId,"id") type="text" name="@originalPath" />
        </div>
        @if (!string.IsNullOrWhiteSpace(Model.HelpText))
        {
            <span class="help-block">@Model.HelpText</span>
        }
    </div>

}