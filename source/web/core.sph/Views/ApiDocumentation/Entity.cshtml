@model Bespoke.Sph.Web.ViewModels.OperationDocumentViewModel
@using Bespoke.Sph.Domain;


<h1>API Documentation for @Model.Ed.Name</h1>
@foreach (var op in @Model.Ed.EntityOperationCollection)
{
    <div id="@op.Name" class="row">
        <h2>@op.Name</h2>
        @if (op.IsHttpDelete)
        {
            <div class="alert-danger alert">
                <strong>DELETE</strong>
                @op.Note
            </div>
            <div>
                <pre>DELETE @op.Name</pre>
            </div>
        }

        @if (op.IsHttpPatch)
        {
            var url = $"{ConfigurationManager.BaseUrl}/{op.Route}";
            <div class="alert alert-warning">
                <strong>PATCH</strong>
                @op.Note
            </div>
            <div>

                <pre>PATCH @url</pre>
                <ul>
                    @foreach (var path in @op.PatchPathCollection)
                    {
                        <li>@path.Path</li>
                    }
                </ul>
            </div>
            <div>
                Sample code
                <pre>
// C#
using(var client = new HttpClient{BaseAddress =  new Uri("@ConfigurationManager.BaseUrl")})
{
    var response = await client.SendAsync("PATCH", body, "@op.Route");
}

// Java
String complete_url = "@url";
String request = "[{\"op\":\"add\", \"path\":\"/name\", \"value\":\"Hello\"}]";
DefaultClientConfig config = new DefaultClientConfig();
    config.getProperties().put(URLConnectionClientHandler.PROPERTY_HTTP_URL_CONNECTION_SET_METHOD_WORKAROUND, true);
Client client = Client.create(config);
WebResource resource = client.resource(complete_url);
ClientResponse response = resource.header("Authorization", "Basic xyzabCDef")
 .type(new MediaType("application", "json-patch+json"))
 .method("PATCH", ClientResponse.class, request);

// F#

// Javascript for browser, NodeJs


// PHP

//VB.Net


// VB script for class ASP

// Python

// Ruby
                </pre>
            </div>
        }
    </div>

}
