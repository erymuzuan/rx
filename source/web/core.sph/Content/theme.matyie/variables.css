
/*# sourceMappingURL=data:application/json;base64,{"version":3,"names":[],"mappings":"","sources":["variables.less"],"sourcesContent":["// Slate 3.0.0\r\n// Variables\r\n// --------------------------------------------------\r\n\r\n@screen-sm-min:         768px;\r\n// Global values\r\n// --------------------------------------------------\r\n\r\n// Grays\r\n// -------------------------\r\n\r\n@gray-darker:            #272B30;\r\n@gray-dark:              #3A3F44;\r\n@gray:                   #52575C;\r\n@gray-light:             #7A8288;\r\n@gray-lighter:           #999;\r\n\r\n// Brand colors\r\n// -------------------------\r\n\r\n@brand-primary:         #428bca;\r\n@brand-success:         #62c462;\r\n@brand-warning:         #f89406;\r\n@brand-danger:          #ee5f5b;\r\n@brand-info:            #5bc0de;\r\n@brand-header-color:    rgb(0,32,80);\r\n\r\n// Scaffolding\r\n// -------------------------\r\n\r\n@body-bg:               #fff;\r\n@text-color:            @gray-darker;\r\n@heading-text-color:            @gray-darker;\r\n\r\n// Links\r\n// -------------------------\r\n\r\n@link-color:            #0FA2EB;\r\n@link-hover-color:      #ee5f5b;\r\n@button-close-color:    @gray-darker;\r\n@button-close-color-hover:    @gray-light;\r\n\r\n// Typography\r\n// -------------------------\r\n\r\n@font-family-sans-serif:  \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n@font-family-serif:       Georgia, \"Times New Roman\", Times, serif;\r\n@font-family-monospace:   Monaco, Menlo, Consolas, \"Courier New\", monospace;\r\n@font-family-base:        @font-family-sans-serif;\r\n\r\n@font-size-base:          12px;\r\n@font-size-large:         ceil(@font-size-base * 1.25); // ~18px\r\n@font-size-small:         ceil(@font-size-base * 0.85); // ~12px\r\n\r\n@line-height-base:        1.428571429; // 20/14\r\n@line-height-computed:    floor(@font-size-base * @line-height-base); // ~20px\r\n\r\n@headings-font-family:    @font-family-base;\r\n@headings-font-weight:    500;\r\n@headings-line-height:    1.1;\r\n\r\n// Iconography\r\n// -------------------------\r\n\r\n@icon-font-path:          \"../fonts/\";\r\n@icon-font-name:          \"glyphicons-halflings-regular\";\r\n\r\n\r\n// Components\r\n// -------------------------\r\n// Based on 14px font-size and 1.428 line-height (~20px to start)\r\n\r\n@padding-base-vertical:          8px;\r\n@padding-base-horizontal:        12px;\r\n\r\n@padding-large-vertical:         14px;\r\n@padding-large-horizontal:       16px;\r\n\r\n@padding-small-vertical:         5px;\r\n@padding-small-horizontal:       10px;\r\n\r\n@line-height-large:              1.33;\r\n@line-height-small:              1.5;\r\n\r\n@border-radius-base:             4px;\r\n@border-radius-large:            6px;\r\n@border-radius-small:            3px;\r\n\r\n@component-active-bg:            transparent;\r\n\r\n@caret-width-base:               4px;\r\n@caret-width-large:              5px;\r\n\r\n// Tables\r\n// -------------------------\r\n\r\n@table-cell-padding:                 8px;\r\n@table-condensed-cell-padding:       5px;\r\n\r\n@table-bg:                           lighten(@body-bg, 3%); // overall background-color\r\n@table-bg-accent:                    lighten(@table-bg, 3%); // for striping\r\n@table-bg-hover:                     lighten(@table-bg, 12%);\r\n@table-bg-active:                    @table-bg-hover;\r\n\r\n@table-border-color:                 darken(@gray-darker, 5%); // table and cell border\r\n\r\n\r\n// Buttons\r\n// -------------------------\r\n\r\n@btn-font-weight:                normal;\r\n\r\n@btn-default-color:              #fff;\r\n@btn-default-bg:                 @navbar-default-bg;\r\n@btn-default-border:             @btn-default-bg;\r\n\r\n@btn-primary-color:              @btn-default-color;\r\n@btn-primary-bg:                 @brand-primary;\r\n@btn-primary-border:             @btn-primary-bg;\r\n\r\n@btn-success-color:              @btn-default-color;\r\n@btn-success-bg:                 @brand-success;\r\n@btn-success-border:             @btn-success-bg;\r\n\r\n@btn-warning-color:              @btn-default-color;\r\n@btn-warning-bg:                 @brand-warning;\r\n@btn-warning-border:             @btn-warning-bg;\r\n\r\n@btn-danger-color:               @btn-default-color;\r\n@btn-danger-bg:                  @brand-danger;\r\n@btn-danger-border:              @btn-danger-bg;\r\n\r\n@btn-info-color:                 @btn-default-color;\r\n@btn-info-bg:                    @brand-info;\r\n@btn-info-border:                @btn-info-bg;\r\n\r\n@btn-link-disabled-color:        @gray-light;\r\n\r\n\r\n// Forms\r\n// -------------------------\r\n\r\n@input-bg:                       #fff;\r\n@input-bg-disabled:              @gray-lighter;\r\n\r\n@input-color:                    @gray-darker;\r\n@input-border:                   #ccc;\r\n@input-border-radius:            @border-radius-base;\r\n@input-border-focus:             #66afe9;\r\n\r\n@input-color-placeholder:        @gray-light;\r\n\r\n@input-height-base:              (@line-height-computed + (@padding-base-vertical * 2) + 2);\r\n@input-height-large:             (ceil(@font-size-large * @line-height-base) + (@padding-large-vertical * 2) + 2);\r\n@input-height-small:             (ceil(@font-size-small * @line-height-base) + (@padding-small-vertical * 2) + 2);\r\n\r\n@legend-color:                   @text-color;\r\n@legend-border-color:            darken(@gray-darker, 5%);\r\n\r\n@input-group-addon-bg:           @gray-lighter;\r\n@input-group-addon-border-color: @input-border;\r\n\r\n\r\n// Dropdowns\r\n// -------------------------\r\n\r\n@dropdown-bg:                    @gray-dark;\r\n@dropdown-border:                rgba(0,0,0,.15);\r\n@dropdown-fallback-border:       @gray-darker;\r\n@dropdown-divider-bg:            @gray-darker;\r\n\r\n@dropdown-link-active-color:     #fff;\r\n@dropdown-link-active-bg:        @gray-darker;\r\n\r\n@dropdown-link-color:            @text-color;\r\n@dropdown-link-hover-color:      #fff;\r\n@dropdown-link-hover-bg:         @dropdown-link-active-bg;\r\n\r\n@dropdown-link-disabled-color:   @text-muted;\r\n\r\n@dropdown-header-color:          @text-muted;\r\n\r\n@dropdown-caret-color:           #000;\r\n\r\n\r\n// COMPONENT VARIABLES\r\n// --------------------------------------------------\r\n\r\n\r\n// Z-index master list\r\n// -------------------------\r\n// Used for a bird's eye view of components dependent on the z-axis\r\n// Try to avoid customizing these :)\r\n\r\n@zindex-navbar:            1000;\r\n@zindex-dropdown:          1000;\r\n@zindex-popover:           1010;\r\n@zindex-tooltip:           1030;\r\n@zindex-navbar-fixed:      1030;\r\n@zindex-modal-background:  1040;\r\n@zindex-modal:             1050;\r\n\r\n// Media queries breakpoints\r\n// --------------------------------------------------\r\n\r\n// Extra small screen / phone\r\n@screen-xs:                  480px;\r\n@screen-phone:               @screen-xs;\r\n\r\n// Small screen / tablet\r\n@screen-sm:                  768px;\r\n@screen-tablet:              @screen-sm;\r\n\r\n// Medium screen / desktop\r\n@screen-md:                  992px;\r\n@screen-desktop:             @screen-md;\r\n\r\n// Large screen / wide desktop\r\n@screen-lg:                  1200px;\r\n@screen-lg-desktop:          @screen-lg;\r\n\r\n// So media queries don't overlap when required, provide a maximum\r\n@screen-xs-max:              (@screen-sm - 1);\r\n@screen-sm-max:              (@screen-md - 1);\r\n@screen-md-max:              (@screen-lg - 1);\r\n\r\n\r\n// Grid system\r\n// --------------------------------------------------\r\n\r\n// Number of columns in the grid system\r\n@grid-columns:              12;\r\n// Padding, to be divided by two and applied to the left and right of all columns\r\n@grid-gutter-width:         30px;\r\n// Point at which the navbar stops collapsing\r\n@grid-float-breakpoint:     @screen-tablet;\r\n\r\n\r\n// Navbar\r\n// -------------------------\r\n\r\n// Basics of a navbar\r\n@navbar-height:                    50px;\r\n@navbar-margin-bottom:             @line-height-computed;\r\n@navbar-default-color:             @text-color;\r\n@navbar-default-bg:                @gray-dark;\r\n@navbar-default-border:            darken(@navbar-default-bg, 6.5%);\r\n@navbar-border-radius:             @border-radius-base;\r\n@navbar-padding-horizontal:        floor(@grid-gutter-width / 2);\r\n@navbar-padding-vertical:          ((@navbar-height - @line-height-computed) / 2);\r\n\r\n// Navbar links\r\n@navbar-default-link-color:                @text-color;\r\n@navbar-default-link-hover-color:          #fff;\r\n@navbar-default-link-hover-bg:             darken(@navbar-default-bg, 8%);\r\n@navbar-default-link-active-color:         #fff;\r\n@navbar-default-link-active-bg:            darken(@navbar-default-bg, 8%);\r\n@navbar-default-link-disabled-color:       #ccc;\r\n@navbar-default-link-disabled-bg:          transparent;\r\n\r\n// Navbar brand label\r\n@navbar-default-brand-color:               @navbar-default-link-color;\r\n@navbar-default-brand-hover-color:         #fff;\r\n@navbar-default-brand-hover-bg:            none;\r\n\r\n// Navbar toggle\r\n@navbar-default-toggle-hover-bg:           darken(@navbar-default-bg, 8%);\r\n@navbar-default-toggle-icon-bar-bg:        @text-color;\r\n@navbar-default-toggle-border-color:       darken(@navbar-default-bg, 8%);\r\n\r\n\r\n// Inverted navbar\r\n//\r\n// Reset inverted navbar basics\r\n@navbar-inverse-color:                      #ccc;\r\n@navbar-inverse-bg:                         @brand-primary;\r\n@navbar-inverse-border:                     darken(@navbar-inverse-bg, 10%);\r\n\r\n// Inverted navbar links\r\n@navbar-inverse-link-color:                 #ccc;\r\n@navbar-inverse-link-hover-color:           #fff;\r\n@navbar-inverse-link-hover-bg:              darken(@navbar-inverse-bg, 12%);\r\n@navbar-inverse-link-active-color:          @navbar-inverse-link-hover-color;\r\n@navbar-inverse-link-active-bg:             darken(@navbar-inverse-bg, 12%);\r\n@navbar-inverse-link-disabled-color:        #ccc;\r\n@navbar-inverse-link-disabled-bg:           transparent;\r\n\r\n// Inverted navbar brand label\r\n@navbar-inverse-brand-color:                @navbar-inverse-link-color;\r\n@navbar-inverse-brand-hover-color:          #fff;\r\n@navbar-inverse-brand-hover-bg:             none;\r\n\r\n// Inverted navbar search\r\n// Normal navbar needs no special styles or vars\r\n@navbar-inverse-search-bg:                  lighten(@navbar-inverse-bg, 25%);\r\n@navbar-inverse-search-bg-focus:            #fff;\r\n@navbar-inverse-search-border:              @navbar-inverse-bg;\r\n@navbar-inverse-search-placeholder-color:   #ccc;\r\n\r\n// Inverted navbar toggle\r\n@navbar-inverse-toggle-hover-bg:            darken(@navbar-inverse-bg, 12%);\r\n@navbar-inverse-toggle-icon-bar-bg:         #fff;\r\n@navbar-inverse-toggle-border-color:        darken(@navbar-inverse-bg, 12%);\r\n\r\n\r\n// Navs\r\n// -------------------------\r\n\r\n@nav-link-padding:                          10px 15px;\r\n@nav-link-hover-bg:                         lighten(@body-bg, 10%);\r\n\r\n@nav-disabled-link-color:                   @gray-light;\r\n@nav-disabled-link-hover-color:             @gray-light;\r\n\r\n@nav-open-link-hover-color:                 #fff;\r\n@nav-open-caret-border-color:               #fff;\r\n\r\n// Tabs\r\n@nav-tabs-border-color:                     darken(@gray-darker, 5%);\r\n\r\n@nav-tabs-link-hover-border-color:          darken(@gray-darker, 5%);\r\n\r\n@nav-tabs-active-link-hover-bg:             lighten(@body-bg, 10%);\r\n@nav-tabs-active-link-hover-color:          #fff;\r\n@nav-tabs-active-link-hover-border-color:   darken(@gray-darker, 5%);\r\n\r\n@nav-tabs-justified-link-border-color:            #ddd;\r\n@nav-tabs-justified-active-link-border-color:     @body-bg;\r\n\r\n// Pills\r\n@nav-pills-active-link-hover-bg:            @component-active-bg;\r\n@nav-pills-active-link-hover-color:         #fff;\r\n\r\n\r\n// Pagination\r\n// -------------------------\r\n\r\n@pagination-bg:                        @btn-default-bg;\r\n@pagination-border:                    rgba(0, 0, 0, 0.6);\r\n\r\n@pagination-hover-bg:                  transparent;\r\n\r\n@pagination-active-bg:                 darken(@pagination-bg, 10%);\r\n@pagination-active-color:              #fff;\r\n\r\n@pagination-disabled-color:            @gray-light;\r\n\r\n\r\n// Pager\r\n// -------------------------\r\n\r\n@pager-border-radius:                  15px;\r\n@pager-disabled-color:                 @gray-light;\r\n\r\n\r\n// Jumbotron\r\n// -------------------------\r\n\r\n@jumbotron-padding:              30px;\r\n@jumbotron-color:                inherit;\r\n@jumbotron-bg:                   darken(@body-bg, 5%);\r\n\r\n@jumbotron-heading-color:        inherit;\r\n\r\n\r\n// Form states and alerts\r\n// -------------------------\r\n\r\n@state-warning-text:             #fff;\r\n@state-warning-bg:               @brand-warning;\r\n@state-warning-border:           darken(spin(@state-warning-bg, -10), 3%);\r\n\r\n@state-danger-text:              #fff;\r\n@state-danger-bg:                @brand-danger;\r\n@state-danger-border:            darken(spin(@state-danger-bg, -10), 3%);\r\n\r\n@state-success-text:             #fff;\r\n@state-success-bg:               @brand-success;\r\n@state-success-border:           darken(spin(@state-success-bg, -10), 5%);\r\n\r\n@state-info-text:                #fff;\r\n@state-info-bg:                  @brand-info;\r\n@state-info-border:              darken(spin(@state-info-bg, -10), 7%);\r\n\r\n\r\n// Tooltips\r\n// -------------------------\r\n@tooltip-max-width:           200px;\r\n@tooltip-color:               #fff;\r\n@tooltip-bg:                  rgba(0,0,0,.9);\r\n\r\n@tooltip-arrow-width:         5px;\r\n@tooltip-arrow-color:         @tooltip-bg;\r\n\r\n\r\n// Popovers\r\n// -------------------------\r\n@popover-bg:                          lighten(@body-bg, 3%);\r\n@popover-max-width:                   276px;\r\n@popover-border-color:                rgba(0,0,0,.2);\r\n@popover-fallback-border-color:       #999;\r\n\r\n@popover-title-bg:                    @popover-bg;\r\n\r\n@popover-arrow-width:                 10px;\r\n@popover-arrow-color:                 @popover-bg;\r\n\r\n@popover-arrow-outer-width:           (@popover-arrow-width + 1);\r\n@popover-arrow-outer-color:           rgba(0,0,0,.25);\r\n@popover-arrow-outer-fallback-color:  #999;\r\n\r\n\r\n// Labels\r\n// -------------------------\r\n\r\n@label-default-bg:            @btn-default-bg;\r\n@label-primary-bg:            @brand-primary;\r\n@label-success-bg:            @brand-success;\r\n@label-info-bg:               @brand-info;\r\n@label-warning-bg:            @brand-warning;\r\n@label-danger-bg:             @brand-danger;\r\n\r\n@label-color:                 #fff;\r\n@label-link-hover-color:      #fff;\r\n\r\n\r\n// Modals\r\n// -------------------------\r\n@modal-inner-padding:         20px;\r\n\r\n@modal-title-padding:         15px;\r\n@modal-title-line-height:     @line-height-base;\r\n\r\n@modal-content-bg:                             lighten(@body-bg, 3%);\r\n@modal-content-border-color:                   rgba(0,0,0,.2);\r\n@modal-content-fallback-border-color:          #999;\r\n\r\n@modal-backdrop-bg:           #000;\r\n@modal-header-border-color:   darken(@gray-darker, 5%);\r\n@modal-footer-border-color:   @modal-header-border-color;\r\n\r\n\r\n// Alerts\r\n// -------------------------\r\n@alert-padding:               15px;\r\n@alert-border-radius:         @border-radius-base;\r\n@alert-link-font-weight:      bold;\r\n\r\n@alert-success-bg:            @state-success-bg;\r\n@alert-success-text:          @state-success-text;\r\n@alert-success-border:        @state-success-border;\r\n\r\n@alert-info-bg:               @state-info-bg;\r\n@alert-info-text:             @state-info-text;\r\n@alert-info-border:           @state-info-border;\r\n\r\n@alert-warning-bg:            @state-warning-bg;\r\n@alert-warning-text:          @state-warning-text;\r\n@alert-warning-border:        @state-warning-border;\r\n\r\n@alert-danger-bg:             @state-danger-bg;\r\n@alert-danger-text:           @state-danger-text;\r\n@alert-danger-border:         @state-danger-border;\r\n\r\n\r\n// Progress bars\r\n// -------------------------\r\n@progress-bg:                 darken(@body-bg, 5%);\r\n@progress-bar-color:          #fff;\r\n\r\n@progress-bar-bg:             @brand-primary;\r\n@progress-bar-success-bg:     @brand-success;\r\n@progress-bar-warning-bg:     @brand-warning;\r\n@progress-bar-danger-bg:      @brand-danger;\r\n@progress-bar-info-bg:        @brand-info;\r\n\r\n\r\n// List group\r\n// -------------------------\r\n@list-group-bg:               transparent;\r\n@list-group-border:           rgba(0, 0, 0, 0.6);\r\n@list-group-border-radius:    @border-radius-base;\r\n\r\n@list-group-hover-bg:         lighten(@body-bg, 10%);\r\n@list-group-active-color:     #fff;\r\n@list-group-active-bg:        lighten(@body-bg, 10%);\r\n@list-group-active-border:    @list-group-border;\r\n\r\n@list-group-link-color:          @text-color;\r\n@list-group-link-heading-color:  #fff;\r\n\r\n\r\n// Panels\r\n// -------------------------\r\n@panel-bg:                    lighten(@body-bg, 3%);\r\n@panel-inner-border:          rgba(0, 0, 0, 0.6);\r\n@panel-border-radius:         @border-radius-base;\r\n@panel-footer-bg:             @panel-default-heading-bg;\r\n\r\n@panel-default-text:          @text-color;\r\n@panel-default-border:        rgba(0, 0, 0, 0.6);\r\n@panel-default-heading-bg:    lighten(@body-bg, 10%);\r\n\r\n@panel-primary-text:          #fff;\r\n@panel-primary-border:        @panel-default-border;\r\n@panel-primary-heading-bg:    @brand-primary;\r\n\r\n@panel-success-text:          @state-success-text;\r\n@panel-success-border:        @panel-default-border;\r\n@panel-success-heading-bg:    @state-success-bg;\r\n\r\n@panel-warning-text:          @state-warning-text;\r\n@panel-warning-border:        @panel-default-border;\r\n@panel-warning-heading-bg:    @state-warning-bg;\r\n\r\n@panel-danger-text:           @state-danger-text;\r\n@panel-danger-border:         @panel-default-border;\r\n@panel-danger-heading-bg:     @state-danger-bg;\r\n\r\n@panel-info-text:             @state-info-text;\r\n@panel-info-border:           @panel-default-border;\r\n@panel-info-heading-bg:       @state-info-bg;\r\n\r\n\r\n// Thumbnails\r\n// -------------------------\r\n@thumbnail-padding:           4px;\r\n@thumbnail-bg:                @body-bg;\r\n@thumbnail-border:            #ddd;\r\n@thumbnail-border-radius:     @border-radius-base;\r\n\r\n@thumbnail-caption-color:     @text-color;\r\n@thumbnail-caption-padding:   9px;\r\n\r\n\r\n// Wells\r\n// -------------------------\r\n@well-bg:                     darken(@body-bg, 5%);\r\n\r\n\r\n// Badges\r\n// -------------------------\r\n@badge-color:                 #fff;\r\n@badge-link-hover-color:      #fff;\r\n@badge-bg:                    @gray-light;\r\n\r\n@badge-active-color:          @link-color;\r\n@badge-active-bg:             @gray-light;\r\n\r\n@badge-font-weight:           bold;\r\n@badge-line-height:           1;\r\n@badge-border-radius:         10px;\r\n\r\n\r\n// Breadcrumbs\r\n// -------------------------\r\n@breadcrumb-bg:               transparent;\r\n@breadcrumb-color:            #ccc;\r\n@breadcrumb-active-color:     @gray-light;\r\n\r\n\r\n// Carousel\r\n// ------------------------\r\n\r\n@carousel-text-shadow:                        0 1px 2px rgba(0,0,0,.6);\r\n\r\n@carousel-control-color:                      #fff;\r\n@carousel-control-width:                      15%;\r\n@carousel-control-opacity:                    .5;\r\n@carousel-control-font-size:                  20px;\r\n\r\n@carousel-indicator-active-bg:                #fff;\r\n@carousel-indicator-border-color:             #fff;\r\n\r\n@carousel-caption-color:                      #fff;\r\n\r\n\r\n// Close\r\n// ------------------------\r\n@close-color:                 #000;\r\n@close-font-weight:           bold;\r\n@close-text-shadow:           0 1px 0 #fff;\r\n\r\n\r\n// Code\r\n// ------------------------\r\n@code-color:                  #c7254e;\r\n@code-bg:                     #f9f2f4;\r\n\r\n@pre-bg:                      #f5f5f5;\r\n@pre-color:                   @gray-dark;\r\n@pre-border-color:            #ccc;\r\n@pre-scrollable-max-height:   340px;\r\n\r\n// Type\r\n// ------------------------\r\n@text-muted:                  @gray-light;\r\n@abbr-border-color:           @gray-light;\r\n@headings-small-color:        @gray-light;\r\n@blockquote-small-color:      @gray-light;\r\n@blockquote-border-color:     @gray-light;\r\n@page-header-border-color:    darken(@gray-darker, 5%);\r\n\r\n// Miscellaneous\r\n// -------------------------\r\n\r\n// Hr border color\r\n@hr-border:                   darken(@gray-darker, 5%);\r\n\r\n// Horizontal forms & lists\r\n@component-offset-horizontal: 180px;\r\n\r\n\r\n// Container sizes\r\n// --------------------------------------------------\r\n\r\n// Small screen / tablet\r\n@container-tablet:            ((720px + @grid-gutter-width));\r\n\r\n// Medium screen / desktop\r\n@container-desktop:           ((940px + @grid-gutter-width));\r\n\r\n// Large screen / wide desktop\r\n@container-lg-desktop:        ((1140px + @grid-gutter-width));\r\n"],"file":"variables.css","sourceRoot":"/source/"} */
