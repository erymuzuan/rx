@using Bespoke.Sph.Domain
@model Bespoke.Sph.Web.ViewModels.FormRendererViewModel
@using Humanizer


@{
    ViewBag.Title = "title";
    Layout = null;
    var ns = ConfigurationManager.ApplicationName + "_" + this.Model.EntityDefinition.Id;
    var typeCtor = $"bespoke.{ns}.domain.{Model.EntityDefinition.Name}({{WebId:system.guid()}})";
    var typeName = $"bespoke.{ns}.domain.{Model.EntityDefinition.Name}";
    var saveUrl = $"/{@Model.EntityDefinition.Name}/Save";
    var validateUrl = $"/Sph/BusinessRule/Validate?{@Model.EntityDefinition.Name};{string.Join(";", Model.Form.Rules.Select(r => r.Dehumanize()))}";
    var codeNamespace = ConfigurationManager.ApplicationName + "_" + Model.EntityDefinition.Id;
    var buttonOperations = Model.Form.FormDesign.FormElementCollection.OfType<Button>()
        .Where(b => b.IsToolbarItem)
        .Where(b => !string.IsNullOrWhiteSpace(b.Operation))
        .Select(b => $"{{ caption :\"{b.Label}\", command : {b.Operation.ToCamelCase()}, icon:\"{b.IconClass}\" }}");

    var commands = Model.Form.FormDesign.FormElementCollection.OfType<Button>()
        .Where(b => b.IsToolbarItem)
        .Where(b => !string.IsNullOrWhiteSpace(b.CommandName))
        .Select(b => $"{{ caption :\"{b.Label}\", command : {b.CommandName}, icon:\"{b.IconClass}\" }}");
    var commandsJs = $"[{string.Join(",", commands.Concat(buttonOperations))}]";


    var formId = @Model.Form.Route + "-form";
    var saveOperation = Model.Form.Operation;
    var partialPath = string.IsNullOrWhiteSpace(Model.Form.Partial) ? string.Empty: ",'" + Model.Form.Partial + "'" ;
    var partialVariable = string.IsNullOrWhiteSpace(Model.Form.Partial) ? string.Empty : ",partial" ;
}:

<h2>title</h2>
<script type="text/javascript" src="~/Scripts/knockout-3.2.0.debug.js"></script>
<script type="text/javascript" data-script="true">
    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router,
        objectbuilders.system, objectbuilders.validation, objectbuilders.eximp,
        objectbuilders.dialog, objectbuilders.watcher, objectbuilders.config,
        objectbuilders.app @Html.Raw(partialPath)],
        function (context, logger, router, system, validation, eximp, dialog, watcher,config,app
            @partialVariable) {

            var entity = ko.observable(new @Html.Raw(typeCtor)),
                errors = ko.observableArray(),
                form = ko.observable(new bespoke.sph.domain.EntityForm()),
                watching = ko.observable(false),
                id = ko.observable(),
                i18n = null,
                activate = function (entityId) {
                    id(entityId);

                    var query = String.format("Id eq '{0}'", entityId),
                        tcs = new $.Deferred(),
                        itemTask = context.loadOneAsync("@Model.EntityDefinition.Name", query),
                        formTask = context.loadOneAsync("EntityForm", "Route eq '@Model.Form.Route'"),
                        watcherTask = watcher.getIsWatchingAsync("@Model.EntityDefinition.Name", entityId),
                        i18nTask = $.getJSON("i18n/" + config.lang + "/@Model.Form.Route");

                    $.when(itemTask, formTask, watcherTask, i18nTask).done(function(b,f,w,n) {
                        if (b) {
                            var item = context.toObservable(b);
                            entity(item);
                        }
                        else {
                            entity(new @Html.Raw(typeCtor));
                        }
                        form(f);
                        watching(w);
                        i18n = n[0];
                        @if (!string.IsNullOrWhiteSpace(Model.Form.Partial))
                        {
                            <text>
                            if(typeof partial.activate === "function"){
                                var pt = partial.activate(entity());
                                if(typeof pt.done === "function"){
                                    pt.done(tcs.resolve);
                                }else{
                                    tcs.resolve(true);
                                }
                            }
                            </text>
                        }
                        else
                        {
                            @:tcs.resolve(true);
                        }
                        
                    });

                    return tcs.promise();
                },
                 @foreach (var operation in Model.EntityDefinition.EntityOperationCollection)
            {
                var opFunc = operation.Name.ToCamelCase();
                <text>@opFunc = function(){

                     if (!validation.valid()) {
                         return Task.fromResult(false);
                     }

                     var data = ko.mapping.toJSON(entity);

                    return  context.post(data, "/@Model.EntityDefinition.Name/@operation.Name" )
                         .then(function (result) {
                             if (result.success) {
                                 logger.info(result.message);
                                 entity().Id(result.id);
                                 errors.removeAll();

                             } else {
                                 errors.removeAll();
                                 _(result.rules).each(function(v){
                                     errors(v.ValidationErrors);
                                 });
                                 logger.error("There are errors in your entity, !!!");
                             }
                         });
                 },</text>
            }
                attached = function (view) {
                    // validation
                    validation.init($('#@formId'), form());


                    @if (!string.IsNullOrWhiteSpace(Model.Form.Partial))
                    {
                        <text>
                    if(typeof partial.attached === "function"){
                        partial.attached(view);
                    }

                    </text>
                    }

                },
                compositionComplete = function() {
                    $("[data-i18n]").each(function (i, v) {
                        var $label = $(v),
                            text = $label.data("i18n");
                        if (typeof i18n[text] === "string") {
                            $label.text(i18n[text]);
                        }
                    });
                },

                @foreach (var rule in Model.Form.Rules)
                {
                    var function = rule.Dehumanize().ToCamelCase();
                  <text>@function = function(){

                    var data = ko.mapping.toJSON(entity);

                   return context.post(data, "/Sph/BusinessRule/Validate?@function" );
                },</text>
                }
                @foreach (var btn in Model.Form.FormDesign.FormElementCollection.OfType<Button>())
                {
                    if (string.IsNullOrWhiteSpace(btn.CommandName))
                    {
                        continue;
                    }
                    var function = btn.CommandName;
                  <text>@function = function(){
                    @Html.Raw(btn.Command)
                },</text>
                }
                save = function() {
                    if (!validation.valid()) {
                        return Task.fromResult(false);
                    }

                    var data = ko.mapping.toJSON(entity);

                    @if (Model.Form.Rules.Any())
                    {

                        <text>

                    return context.post(data, "@validateUrl")
                        .then(function(result) {
                            if(result.success){
                                context.post(data, "@saveUrl")
                                   .then(function(result) {
                                       entity().Id(result.id);
                                       app.showMessage("Your @Model.EntityDefinition.Name has been successfully saved", "@ConfigurationManager.ApplicationFullName", ["OK"]);
                                   });
                            }else{
                                var ve = _(result.validationErrors).map(function(v){
                                    return {
                                        Message : v.message
                                    };
                                });
                                errors(ve);
                                logger.error("There are errors in your entity, !!!");
                            }
                        });
                    </text>
                    }
                    else
                    {
                        <text>

                    return context.post(data, "@saveUrl")
                        .then(function(result) {
                            entity().Id(result.id);
                            app.showMessage("Your @Model.EntityDefinition.Name has been successfully saved", "@ConfigurationManager.ApplicationFullName", ["OK"]);

                        });
                    </text>
                    }

                },
                remove = function() {
                    return $.ajax({
                        type: "DELETE",
                        url: "/@(Model.EntityDefinition.Name)/Remove/" + entity().Id(),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function() {
                            app.showMessage("Your item has been successfully removed", "Removed", ["OK"])
                              .done(function () {
                                  window.location = "#@(Model.EntityDefinition.Name.ToLowerInvariant())";
                              });
                        }
                    });


                };

            var vm = {
                  @if (!string.IsNullOrWhiteSpace(Model.Form.Partial))
                  {
                            <text>
                            partial : partial,
                            </text>
                    }
                    @foreach (var rule in Model.Form.Rules)
                    {
                        var function = rule.Dehumanize().ToCamelCase();
                    <text>@function : @function,</text>
                    }
                activate: activate,
                config: config,
                attached: attached,
                compositionComplete:compositionComplete,
                entity: entity,
                errors: errors,
                save : save,
                @foreach (var op in Model.EntityDefinition.EntityOperationCollection)
                {
                        var function = op.Name.ToCamelCase();
                    <text>@function : @function,</text>

                }
                //

                @foreach (var btn in Model.Form.FormDesign.FormElementCollection.OfType<Button>().Where(b => !string.IsNullOrWhiteSpace(b.CommandName)))
                {
                    <text>@(btn.CommandName) : @(btn.CommandName) ,
                </text>
                }

                toolbar : {
                    @if (Model.Form.IsEmailAvailable)
                    {
                        <text>emailCommand : {
                        entity : "@Model.EntityDefinition.Name",
                        id :id
                    },</text>
                    }
                    @if (Model.Form.IsPrintAvailable)
                    {
                        <text>printCommand :{
                        entity : '@Model.EntityDefinition.Name',
                        id : id
                    },</text>
                    }
                    @if (Model.Form.IsRemoveAvailable)
            {
                <text>removeCommand :remove,
                    canExecuteRemoveCommand : ko.computed(function(){
                        return entity().Id();
                    }),</text>
            }
                    @if (Model.Form.IsWatchAvailable)
                    {
                        <text>
                    watchCommand: function() {
                        return watcher.watch("@Model.EntityDefinition.Name", entity().Id())
                            .done(function(){
                                watching(true);
                            });
                    },
                    unwatchCommand: function() {
                        return watcher.unwatch("@Model.EntityDefinition.Name", entity().Id())
                            .done(function(){
                                watching(false);
                            });
                    },
                    watching: watching,</text>
                    }
                    @if (!string.IsNullOrWhiteSpace(@saveOperation))
                    {
                        <text>
                    saveCommand : @saveOperation.ToCamelCase(),
                    @if (!string.IsNullOrWhiteSpace(Model.Form.Partial))
                    {
                        <text>                        
                    canExecuteSaveCommand : ko.computed(function(){
                        if(typeof partial.canExecuteSaveCommand === "function"){
                            return partial.canExecuteSaveCommand();
                        }
                        return true;
                    }),
                        </text>
                    }
                    </text>
                    }
                    commands : ko.observableArray(@Html.Raw(commandsJs))
                }
            };

            return vm;
        });
</script>