@using System.Configuration
@using System.Web.Mvc.Html
@model dynamic

@{
    Layout = null;
    var theme = ConfigurationManager.AppSettings["sph:AceTheme"] ?? "crimson_editor";
    var fontSize = ConfigurationManager.AppSettings["sph:AceFontSize"] ?? "18";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Editor</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/font-awesome.min.css" rel="stylesheet" />
    <style type="text/css" media="screen">
        body {
            overflow: hidden;
        }

        #editor {
            margin: 0;
            margin-top: 50px;
            position: absolute;
            top: 0;
            bottom: 20px;
            left: 0;
            right: 0;
            font-size: @(fontSize)px;
        }
    </style>
</head>
<body>
    @Html.Partial("_Toolbar")
    <pre id="editor">
// PLEASE WAIT WHILE YOUR SCRIPT IS LOADING
</pre>

    <div class="modal fade" style="background-color: white" id="help" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="myModalLabel">Modal title</h4>
                </div>
                <div class="modal-body">
                    ...
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-default">Save changes</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

    <script src="~/Scripts/ace/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/jquery-2.1.0.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/bootstrap.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/knockout-3.1.0.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/_function.prototypes.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/_utils.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/SphApp/objectbuilders.js" type="text/javascript"></script>
    <script src="~/Scripts/require.js" type="text/javascript"></script>
    <script src="~/Scripts/underscore.js" type="text/javascript"></script>
    <script type="text/javascript">

        var bespoke = bespoke || {};
        bespoke.sph = bespoke.sph || {};
        bespoke.sph.domain = bespoke.sph.domain || {};


        require.config({
            baseUrl: "/SphApp",
            waitSeconds: 15,
            paths: {
                'durandal': '/Scripts/durandal',
                'plugins': '/Scripts/durandal/plugins'
            }
        });
        define('jquery', function () { return jQuery; });
        define('knockout', ko);
    </script>

    <script>

        require(['services/datacontext', 'jquery', 'services/app'], function (context, jquery, app) {

            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/@theme");
            @{
            var mode = this.Request.QueryString["mode"] ?? "csharp";
        }
            editor.getSession().setMode("ace/mode/@mode");
            editor.gotoLine(1);

            editor.commands.addCommand({
                name: 'GotoLine',
                bindKey: { win: 'Ctrl-G', mac: 'Command-G' },
                exec: function () {
                    require(['viewmodels/ace.goto.line'], function (dialog) {
                        app.showModal(dialog)
                            .done(function (result) {
                                if (result === "OK") {
                                    editor.gotoLine(dialog.line());
                                }
                            });
                    });
                },
                readOnly: true
            });

            var save = function () {
                if (window.saved)
                    window.saved(editor.getValue());

            },
                saveAndClose = function () {
                    if (window.saved)
                        window.saved(editor.getValue(), true);

                },
                copy = function () {

                },
                paste = function () {

                }, search = function () {

                },
                gotoLine = function (number) {

                },
                vm = {
                    paste: paste,
                    searchText: ko.observable(),
                    copy: copy,
                    save: save,
                    search: search,
                    saveAndClose: saveAndClose,
                    gotoLine: gotoLine,
                    snippets: ko.observableArray(),
                    logs: ko.observableArray(),
                    openSnippetEditor: function () {
                        require(['viewmodels/snippets.dialog'], function (dialog) {

                            app.showModal(dialog)
                                .done(function () {

                                });
                            setTimeout(function() {
                                $('div.modal-backdrop').remove();
                            }, 500);
                        });
                    }

                };
            ko.applyBindings(vm, document.getElementById('header-navbar'));



            $('#theme').change(function () {
                editor.setTheme("ace/theme/" + $(this).val());
                $.post('/Editor/SaveSetting', { 'ace-theme': $(this).val() });
            });
            $('#font-size').change(function () {
                $('#editor').css("font-size", $(this).val() + "px");
                $.post('/Editor/SaveSetting', { 'ace-font-size': $(this).val() });
            });

            // let it run
            var count = 0;
            while (!window.code && count < 3) {
                alert(count + ": Cannot detect code");
                count++;
            }
            editor.setValue(window.code);
            editor.gotoLine(1);


        });
    </script>

</body>
</html>
