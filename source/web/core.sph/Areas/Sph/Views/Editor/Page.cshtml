@using System.Configuration
@using System.Web.Mvc.Html
@model Bespoke.Sph.Web.ViewModels.EditorPageViewModel

@{
    Layout = null;
    var theme = ConfigurationManager.AppSettings["sph:AceTheme"] ?? "crimson_editor";
    var fontSize = ConfigurationManager.AppSettings["sph:AceFontSize"] ?? "18";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Editor</title>
    <link href="~/Content/external/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/external/font-awesome.min.css" rel="stylesheet" />
    <style type="text/css" media="screen">
        body {
            overflow: hidden;
        }

        #editor {
            margin: 0;
            margin-top: 50px;
            position: absolute;
            top: 0;
            bottom: 20px;
            left: 0;
            right: 0;
            font-size: @(fontSize)px;
        }
        div.ace_search {
            color: #5F5E5E;
        }

        button.ace_replacebtn {
            margin-top: 2px;
            font-size: 16px;
            padding-left: 5px;
            padding-right: 5px;
        }
    </style>
</head>
<body>
    @Html.Partial("_Toolbar")
    <pre id="editor">
// PLEASE WAIT WHILE YOUR SCRIPT IS LOADING
</pre>


    <div class="modalBlockout" style="z-index: 1051; opacity: 0.4;" data-bind="visible: isBusy"></div>
    <img src="~/Images/spinner-md.gif" alt="loading" class="absolute-center" data-bind="visible: isBusy" />

    @Html.Partial("_VendorScripts")
    <script type="text/javascript">

        var bespoke = bespoke || {};
        bespoke.sph = bespoke.sph || {};
        bespoke.sph.domain = bespoke.sph.domain || {};


        require.config({
            baseUrl: "/SphApp",
            waitSeconds: 15
        });
        define('jquery', function () { return jQuery; });
        define('knockout', ko);
    </script>

    <script>

        var editor = ace.edit("editor");
        editor.setTheme("ace/theme/@theme");
        require(['services/datacontext', 'jquery', 'services/app', 'services/system'], function (context, jquery, app, system) {

            @{
            var mode = this.Request.QueryString["mode"] ?? "csharp";
        }
            editor.getSession().setMode("ace/mode/@mode");

            var count = 0;
            while (!window.code && count < 3) {
                alert(count + ": Cannot detect code");
                count++;
            }
            editor.setValue(window.code);
            var cursor2 = localStorage.getItem("page_@Model.Page.Id"),
                c = JSON.parse(cursor2);
            if (c) {
                editor.focus();
                editor.gotoLine(c.row);
                editor.moveCursorToPosition(c);
            } else {
                editor.gotoLine(1);
            }


            editor.commands.addCommand({
                name: 'GotoLine',
                bindKey: { win: 'Ctrl-G', mac: 'Command-G' },
                exec: function () {
                    require(['viewmodels/ace.goto.line'], function (dialog) {
                        app.showModal(dialog)
                            .done(function (result) {
                                if (result === "OK") {
                                    editor.gotoLine(dialog.line());
                                }
                            });
                    });
                },
                readOnly: true
            });

            var isBusy = ko.observable(),
                save = function () {
                    if (window.saved)
                        window.saved(editor.getValue());

                },
                saveAndClose = function () {
                    if (window.saved)
                        window.saved(editor.getValue(), true);

                    var cursor = editor.selection.getCursor();
                    if (cursor) {
                        localStorage.setItem("page_@Model.Page.Id", JSON.stringify(cursor));
                    }

                },
                copy = function () {

                },
                paste = function () {

                }, search = function () {

                },
                gotoLine = function (number) {

                },
                logs = function () {

                    require(['viewmodels/page.logs', 'services/app'], function (dialog, app2) {
                        var query = "Type eq 'Page' and EntityId = @Model.Page.Id";
                        context.loadAsync("AuditTrail", query)
                            .done(function (lo) {
                                dialog.logs(lo.itemCollection);
                                app2.showDialog(dialog)
                                    .done(function (result) {
                                        if (result === "OK") {
                                            editor.setValue(dialog.code());
                                        }
                                    });

                            });

                    });
                },
                vm = {
                    paste: paste,
                    searchText: ko.observable(),
                    copy: copy,
                    save: save,
                    search: search,
                    saveAndClose: saveAndClose,
                    gotoLine: gotoLine,
                    logs: logs,
                    isBusy: isBusy,
                    snippets: ko.observableArray(),
                    openSnippetEditor: function () {
                        require(['viewmodels/snippets.dialog', 'services/app'], function (dialog, app2) {

                            app2.showModal(dialog)
                                .done(function () {

                                });

                        });
                    },
                    showHelp: function () {

                    }
                };
            ko.applyBindings(vm, document.getElementById('header-navbar'));




            $('#theme').change(function () {
                editor.setTheme("ace/theme/" + $(this).val());
                $.post('/Editor/SaveSetting', { 'ace-theme': $(this).val() });
            });
            $('#font-size').change(function () {
                $('#editor').css("font-size", $(this).val() + "px");
                $.post('/Editor/SaveSetting', { 'ace-font-size': $(this).val() });
            });
            $('#snippets-list').on('click', 'li>a', function () {
                var sp = ko.dataFor(this),
                    code = ko.unwrap(sp.code);
                editor.insert(code);
            });

            $.getJSON('/code.snippets.js')
                .done(function (snippets) {
                    vm.snippets(snippets);
                });

        });
    </script>

</body>
</html>
