@using Newtonsoft.Json
@model Bespoke.Sph.Web.ViewModels.TemplateFormViewModel

@{
    Layout = null;
    var setting = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All, Formatting = Formatting.Indented };
}
<script src="~/SphApp/objectbuilders.js"></script>
<script src="~/Scripts/knockout-3.1.0.debug.js"></script>
<script src="~/Scripts/knockout.mapping-latest.debug.js"></script>
<script src="~/SphApp/schemas/form.designer.g.js"></script>

<script type="text/javascript" data-script="true">

    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router, objectbuilders.system, objectbuilders.app, objectbuilders.eximp, objectbuilders.dialog],
        function (context, logger, router, system, app, eximp, dialog) {

            var errors = ko.observableArray(),
                operationsOption = ko.observableArray(),
                entity = ko.observable(new bespoke.sph.domain.EntityDefinition()),
                form = ko.observable(new bespoke.sph.domain.EntityForm({WebId:system.guid()})),
                activate = function (entityid, formid) {
                    var elements = @Html.Raw(JsonConvert.SerializeObject(Model.FormElements,setting)),
                        oels = _(elements.$values).map(function (v){return context.toObservable(v);});
                    vm.formElements(oels);

                    var fid = parseInt(formid),
                        id = parseInt(entityid),
                        query = String.format("EntityDefinitionId eq {0}", id),
                        tcs = new $.Deferred();

                    context.loadOneAsync("EntityDefinition", query)
                        .done(function (b) {
                            entity(b);
                            if (!fid) {
                                tcs.resolve(true);
                            }
                            var operations = (b.EntityOperationCollection()).map(function(v) {
                                return v.Name();
                            });
                            operations.push("save");
                            operationsOption(operations);
                            //b.loadSchema();
                        });
                    if (fid) {
                        context.loadOneAsync("EntityForm", "EntityFormId eq " + fid)
                        .done(function(f) {
                            _(f.FormDesign().FormElementCollection()).each(function(v) {
                                v.isSelected = ko.observable(false);
                            });
                            form(f);
                            tcs.resolve(true);
                        });
                    }
                    form().Name.subscribe(function(v) {
                        if (!form().Route()) {
                            form().Route(v.toLowerCase().replace(/\W+/g, "-"));
                        }
                    });
                    form().EntityDefinitionId(id);

                    return tcs.promise();

                },
                attached = function(view) {

                    var fd = ko.unwrap(form().FormDesign);

                    var dropDown = function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        var button = $(this);
                        button.parent().addClass("open")
                            .find("input:first").focus()
                            .select();
                    };

                    // Fix input element click problem
                    $(view).on('click mouseup mousedown', '.dropdown-menu input, .dropdown-menu label',
                        function (e) {
                            e.stopPropagation();
                        });
                    $('#template-form-designer').on('click', 'button.dropdown-toggle', dropDown);


                    //toolbox item clicked
                    $('#add-field').on("click", 'a', function (e) {
                        e.preventDefault();
                        _(fd.FormElementCollection()).each(function (f) {
                            f.isSelected(false);
                        });

                        // clone
                        var fe = ko.mapping.fromJS(ko.mapping.toJS(ko.dataFor(this)));
                        fe.isSelected = ko.observable(true);
                        fe.Label("Label " + fd.FormElementCollection().length);
                        fe.CssClass("");
                        fe.Visible("true");
                        fe.Enable("true");
                        fe.Size("input-large");
                        fe.ElementId(system.guid());

                        fd.FormElementCollection.push(fe);
                        vm.selectedFormElement(fe);


                    });

                    // kendoEditor
                    $('#template-form-designer').on('click', 'textarea', function () {
                        var $editor = $(this),
                            kendoEditor = $editor.data("kendoEditor");
                        if (!kendoEditor) {
                            var htmlElement = ko.dataFor(this),
                                editor = $editor.kendoEditor({
                                    change:function() {
                                        htmlElement.Text(this.value());
                                    }
                                }).data("kendoEditor");

                            htmlElement.Text.subscribe(function(t) {
                                editor.value(ko.unwrap(t));
                            });

                        }
                    }
                    );


                    var receive = function (evt, ui) {
                        var elements = _($('#template-form-designer>form>div')).map(function (div) {
                            return ko.dataFor(div);
                        }),
                        fe = ko.dataFor(ui.item[0]),
                        sortable = $(this),
                        position = 0,
                        children = sortable.children();

                        fe.isSelected = ko.observable(true);
                        fe.Enable("true");
                        fe.Visible("true");

                        for (var i = 0; i < children.length; i++) {
                            if ($(children[i]).position().top > ui.position.top) {
                                position = i;
                                break;
                            }
                        }
                        elements.splice(position, 0, fe);
                        $('#template-form-designer>form').sortable("destroy");
                        //rebuild
                        fd.FormElementCollection(elements);
                        initDesigner();
                        $('#template-form-designer>form li.ui-draggable').remove();
                    },
                        initDesigner = function () {
                            $('#template-form-designer>form').sortable({
                                items: '>div',
                                placeholder: 'ph',
                                helper: 'original',
                                dropOnEmpty: true,
                                forcePlaceholderSize: true,
                                forceHelperSize: false,
                                receive: receive
                            });
                        };

                    initDesigner();
                    $('#add-field>ul>li').draggable({
                        helper: 'clone',
                        connectToSortable: "#template-form-designer>form"
                    });


                    $('section.context-action-panel').on('click', 'buton.close', function() {
                        $(this).parents('div.context-action').hide();
                    });
                },
                supportsHtml5Storage = function () {
                    try {
                        return 'localStorage' in window && window['localStorage'] !== null;
                    } catch (e) {
                        return false;
                    }
                },
                okClick = function (data, ev) {
                    if (bespoke.utils.form.checkValidity(ev.target)) {

                        var fd = ko.unwrap(form().FormDesign);
                        // get the sorted element
                        var elements = _($('#template-form-designer>form>div')).map(function (div) {
                            return ko.dataFor(div);
                        });
                        fd.FormElementCollection(elements);
                        dialog.close(this, "OK");
                        if (supportsHtml5Storage()) {
                            localStorage.removeItem(form().WebId());
                        }
                    }
                },
                cancelClick = function () {
                    if (supportsHtml5Storage()) {
                        localStorage.removeItem(form().WebId());
                    }
                    dialog.close(this, "Cancel");
                },
                selectFormElement = function (fe) {

                    $('.selected-form-element').each(function(e) {
                        var kd = ko.dataFor(this);
                        if (typeof kd.isSelected === "function")
                            kd.isSelected(false);
                    });

                    if (typeof fe.isSelected === "undefined") {
                        fe.isSelected = ko.observable(true);
                    }
                    fe.isSelected(true);
                    vm.selectedFormElement(fe);
                    if (supportsHtml5Storage()) {
                        localStorage.setItem(form().WebId(), ko.mapping.toJSON(form));
                    }
                },
                removeFormElement = function (fe) {
                    var fd = ko.unwrap(form().FormDesign);
                    fd.FormElementCollection.remove(fe);
                },
                importCommand = function() {
                    return eximp.importJson()
                 .done(function (json) {
                     try {

                         var obj = JSON.parse(json),
                             clone = context.toObservable(obj);

                         form().FormDesign(clone.FormDesign());

                     } catch (error) {
                         logger.logError('Fail template import tidak sah', error, this, true);
                     }
                 });
                },
                publish = function() {
                    var fd = ko.unwrap(form().FormDesign);
                    // get the sorted element
                    var elements = _($('#template-form-designer>form>div')).map(function (div) {
                        return ko.dataFor(div);
                    });
                    fd.FormElementCollection(elements);


                    var tcs = new $.Deferred(),
                        data = ko.mapping.toJSON(form);

                    context.post(data, "/Sph/EntityForm/Publish")
                        .then(function(result) {
                            if (result.success) {
                                logger.info(result.message);
                                entity().EntityDefinitionId(result.id);
                                errors.removeAll();
                            } else {
                                errors(result.Errors);
                                logger.error("There are errors in your entity, !!!");
                            }
                            tcs.resolve(result);
                        });
                    return tcs.promise();

                },
                save = function() {
                    var fd = ko.unwrap(form().FormDesign);
                    // get the sorted element
                    var elements = _($('#template-form-designer>form>div')).map(function (div) {
                        return ko.dataFor(div);
                    });
                    fd.FormElementCollection(elements);


                    var tcs = new $.Deferred(),
                        data = ko.mapping.toJSON(form);

                    context.post(data, "/Sph/EntityForm/Save")
                        .then(function(result) {
                            form().EntityFormId(result.id);
                            tcs.resolve(result);
                        });
                    return tcs.promise();
                },

            depublishAsync = function () {

                var tcs = new $.Deferred(),
                    data = ko.mapping.toJSON(form);

                context.post(data, "/EntityForm/Depublish")
                    .then(function (result) {
                        if (result.success) {
                            logger.info(result.message);
                            errors.removeAll();
                        } else {
                            var views = _(result.views).map(function(v) {
                                return {
                                    Message : v + " view has a link to this form!",
                                    Code : ""
                                }
                            });
                            errors(views);
                            logger.error("There are errors in your form, depublish those views first to proceed, !!!");
                        }
                        tcs.resolve(result);
                    });
                return tcs.promise();
            };

            var vm = {
                errors: errors,
                operationsOption: operationsOption,
                attached: attached,
                activate: activate,
                formElements: ko.observableArray(),
                selectedFormElement: ko.observable(),
                selectFormElement : selectFormElement,
                removeFormElement : removeFormElement,
                form: form,
                entity : entity,
                okClick: okClick,
                cancelClick: cancelClick,
                importCommand :importCommand,
                toolbar : {
                    commands :ko.observableArray([{
                        caption: 'Clone',
                        icon: 'fa fa-copy',
                        command: function () {
                            form().Name(form().Name() + ' Copy (1)');
                            form().Route('');
                            form().EntityFormId(0);
                            return Task.fromResult(0);
                        }
                    },
                    {
                        caption : 'Publish',
                        icon : 'fa fa-sign-in',
                        command : publish,
                        enable : ko.computed(function() {
                            return form().EntityFormId() > 0;
                        })
                    },
                    {
                        command: depublishAsync,
                        caption: 'Depublish',
                        icon: "fa fa-sign-out",
                        enable: ko.computed(function () {
                            return form().EntityFormId() > 0 && form().IsPublished();
                        })
                    }
                    ]),
                    saveCommand : save
                }
            };

            return vm;

        });


</script>
