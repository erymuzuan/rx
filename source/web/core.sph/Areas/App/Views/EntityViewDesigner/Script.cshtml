@model Bespoke.Sph.Web.ViewModels.TemplateFormViewModel

@{
    Layout = null;
}
<script src="~/SphApp/objectbuilders.js"></script>
<script src="~/Scripts/knockout-3.4.0.debug.js"></script>
<script src="~/Scripts/knockout.mapping-latest.debug.js"></script>
<script src="~/SphApp/schemas/form.designer.g.js"></script>

<script type="text/javascript" data-script="true">

    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router, objectbuilders.system, objectbuilders.app],
        function (context, logger, router, system, app) {

            var errors = ko.observableArray(),
                endpointOptions = ko.observableArray(),
                templateOptions = ko.observableArray(),
                originalEntity = "",
                warnings = ko.observableArray(),
                entity = ko.observable(new bespoke.sph.domain.EntityDefinition()),
                view = ko.observable(new bespoke.sph.domain.EntityView({ WebId: system.guid() })),
                activate = function (id) {


                    context.getListAsync("ViewTemplate", "Id ne '0'", "Name")
                            .done(templateOptions);

                    return context.loadOneAsync("EntityView", "Id eq '" + id + "'")
                            .then(function (f) {
                                view(f);
                                return context.loadOneAsync("EntityDefinition", "Id eq '" + ko.unwrap(f.EntityDefinitionId) + "'");
                            })
                            .then(function (b) {
                                entity(b);
                                window.typeaheadEntity = b.Name();
                                return context.getListAsync("QueryEndpoint", "Entity eq '" + ko.unwrap(b.Name) + "'", "Id");
                            })
                            .then(endpointOptions);


                },
                attached = function (vw) {

                    originalEntity = ko.toJSON(view);
                    $(vw).on("click", "#expand-collapse-property-tabe", function () {
                        if ($(this).html().indexOf("fa-expand") > -1) {

                            $("#view-column-designer")
                                    .removeClass("col-lg-8").addClass("col-lg-4")
                                    .removeClass("col-md-8").addClass("col-md-4");
                            $("#view-properties-tab")
                                .removeClass("col-lg-4").addClass("col-lg-8")
                                .removeClass("col-md-4").addClass("col-md-8");
                            $(this).html('<i class="fa fa-compress"></i>');
                        } else {

                            $("#view-column-designer")
                                .removeClass("col-lg-4").addClass("col-lg-8")
                                .removeClass("col-md-4").addClass("col-md-8");
                            $("#view-properties-tab")
                                .removeClass("col-lg-8").addClass("col-lg-4")
                                .removeClass("col-md-8").addClass("col-md-4");
                            $(this).html('<i class="fa fa-expand"></i>');
                        }
                    });

                },
                publish = function () {

                    // get the sorted element
                    var columns = _($('ul#column-design>li:not(:last)')).map(function (div) {
                        return ko.dataFor(div);
                    });
                    view().ViewColumnCollection(columns);

                    var data = ko.mapping.toJSON(view);

                    return context.put(data, "/api/entity-views/" + ko.unwrap(view().Id) + "/publish")
                        .then(function (result) {
                            if (result.success) {
                                logger.info(result.message);
                                view().Id(result.id);
                                errors.removeAll();
                                view().IsPublished(true);
                                originalEntity = ko.toJSON(view);
                            } else {
                                errors(result.Errors);
                                logger.error("There are errors in your entity, !!!");
                            }

                        });
                },
                save = function () {
                    // get the sorted element
                    var columns = _($("ul#column-design>li:not(:last)")).map(function (div) {
                        return ko.dataFor(div);
                    });
                    view().ViewColumnCollection(columns);

                    var data = ko.mapping.toJSON(view);

                    return context.put(data, "/api/entity-views/")
                        .then(function (result) {
                            view().Id(result.id);
                            logger.info(result.message);
                            originalEntity = ko.toJSON(view);
                        });
                },
            canDeactivate = function () {
                var tcs = new $.Deferred();
                if (originalEntity !== ko.toJSON(view)) {
                    app.showMessage("Save change to the item", "Rx Developer", ["Yes", "No", "Cancel"])
                        .done(function (dialogResult) {
                            if (dialogResult === "Yes") {
                                save().done(function () {
                                    tcs.resolve(true);
                                });
                            }
                            if (dialogResult === "No") {
                                tcs.resolve(true);
                            }
                            if (dialogResult === "Cancel") {
                                tcs.resolve(false);
                            }

                        });
                } else {
                    return true;
                }
                return tcs.promise();
            },
                remove = function () {

                    var tcs = new $.Deferred(),
                        data = ko.mapping.toJSON(view);
                    app.showMessage("Are you sure you want to delete this view? This action cannot be undone.", "Reactive Developer", ["Yes", "No"])
                        .done(function (dialogResult) {
                            if (dialogResult === "Yes") {
                                context.send(data, "/api/entity-views/" + ko.unwrap(view().Id) , "DELETE")
                                    .done(function () {
                                        window.location = "/sph#dev.home";
                                    })
                                    .fail(function (v) {
                                        logger.error(v.statusText);
                                        tcs.reject(v);
                                    })
                                    .then(tcs.resolve);
                            }
                            tcs.resolve(false);
                        });
                    return tcs.promise();
                },

            depublishAsync = function () {

                var data = ko.mapping.toJSON(view);

                return context.put(data, "/api/entity-views/" + ko.unwrap(view().Id) + "/depublish")
                     .then(function (result) {
                         if (result.success) {
                             view().IsPublished(false);
                             logger.info(result.message);
                             errors.removeAll();
                         } else {
                             logger.error("There are errors in your view, !!!");
                         }
                     });
            },
            partialEditor = null,
            editCode = function () {
                if (null == partialEditor || partialEditor.closed) {
                    var partial = "partial/" + view().Route();
                    partialEditor = window.open("/sph/editor/file?id=/sphapp/" + partial + ".js", '_blank', 'height=600px,width=800px,toolbar=0,location=0');
                    view().Partial(partial);
                } else {
                    partialEditor.focus();
                }

                return Task.fromResult(true);

            },
            translateLabels = function () {
                var tcs = new $.Deferred(),
                    columns = view().ViewColumnCollection();
                require(["viewmodels/resource.table.dialog", "durandal/app"], function (dg, app2) {
                    dg.keys(_(columns).map(function (v) {
                        return ko.unwrap(v.Header);
                    }));
                    dg.resource(view().Route());
                    app2.showDialog(dg).done(tcs.resolve);

                });

                return tcs.promise();
            };

            var vm = {
                warnings: warnings,
                errors: errors,
                endpointOptions: endpointOptions,
                templateOptions: templateOptions,
                attached: attached,
                activate: activate,
                canDeactivate: canDeactivate,
                view: view,
                entity: entity,
                formsQuery: ko.computed(function () {
                    return String.format("EntityDefinitionId eq '{0}'", ko.unwrap(entity().Id));
                }),
                toolbar: {
                    commands: ko.observableArray([{
                        caption: "Clone",
                        icon: "fa fa-copy",
                        command: function () {
                            view().Name(view().Name() + ' Copy (1)');
                            view().Route('');
                            view().Id("0");
                            return Task.fromResult(0);
                        }
                    },
                    {
                        caption: "Publish",
                        icon: "fa fa-sign-in",
                        command: publish,
                        enable: ko.computed(function () {
                            return view().Id() && view().Id() !== "0";
                        })
                    },
                    {
                        caption: "Depublish",
                        icon: "fa fa-sign-out",
                        command: depublishAsync,
                        enable: ko.computed(function () {
                            return view().Id() && view().Id() !== "0" && view().IsPublished();
                        })
                    },
                    {
                        command: editCode,
                        caption: "Edit Code",
                        icon: "fa fa-code",
                        enable: ko.computed(function () {
                            return view().Route();
                        })
                    },
                    {
                        command: translateLabels,
                        caption: "Translate",
                        icon: "fa fa-language",
                        enable: ko.computed(function () {
                            return view().Route();
                        })
                    }
                    ]),
                    saveCommand: save,
                    removeCommand: remove
                }
            };

            return vm;

        });


</script>
