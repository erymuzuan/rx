@using Newtonsoft.Json
@model Bespoke.Sph.Web.ViewModels.TemplateFormViewModel

@{
    Layout = null;
    var setting = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All, Formatting = Formatting.Indented };
}
<script src="~/SphApp/objectbuilders.js"></script>
<script src="~/Scripts/knockout-3.0.0.debug.js"></script>
<script src="~/Scripts/knockout.mapping-latest.debug.js"></script>
<script src="~/SphApp/schemas/trigger.workflow.g.js"></script>
<script src="~/SphApp/schemas/form.designer.g.js"></script>

<script type="text/javascript" data-script="true">

    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router, objectbuilders.system, objectbuilders.app, objectbuilders.eximp, objectbuilders.dialog],
        function (context, logger, router, system, app, eximp, dialog) {

            var activate = function (wdid, screenid) {
                var elements = @Html.Raw(JsonConvert.SerializeObject(Model.FormElements,setting)),
                    oels = _(elements.$values).map(function (v){return context.toObservable(v);});
                vm.formElements(oels);

                if (wdid) {
                    var id = parseInt(wdid),
                        query = String.format("WorkflowDefinitionId eq {0}", id),
                        tcs = new $.Deferred();

                    context.loadOneAsync("WorkflowDefinition", query)
                        .done(function (b) {
                            vm.wd(b);
                            tcs.resolve(true);
                            b.loadSchema();
                            var act = _(b.ActivityCollection()).find(function(v) { return v.WebId() == screenid; });
                            vm.activity(act);

                        });
                    return tcs.promise();
                }
                return Task.fromResult(true);
            },
                attached = function(view) {

                    if (!vm.activity().InvitationMessageBody())
                        vm.activity().InvitationMessageBody("@@Model.Screen.Name task is assigned to you go here @@Model.Url");
                    if (!vm.activity().InvitationMessageSubject())
                        vm.activity().InvitationMessageSubject("[Sph] @@Model.Screen.Name  task is assigned to you");

                    if (!vm.activity().CancelMessageBody())
                        vm.activity().CancelMessageBody("@@Model.Screen.Name task was cancelled this url is not longer valid @@Model.Url");
                    if (!vm.activity().CancelMessageSubject())
                        vm.activity().CancelMessageSubject("[Sph] @@Model.Screen.Name was cancelled");

                    var fd = ko.unwrap(vm.activity().FormDesign);

                    var dropDown = function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        var button = $(this);
                        button.parent().addClass("open")
                            .find("input:first").focus()
                            .select();
                    };

                    // Fix input element click problem
                    $(view).on('click mouseup mousedown', '.dropdown-menu input, .dropdown-menu label',
                        function (e) {
                            e.stopPropagation();
                        });
                    $('#template-form-designer').on('click', 'button.dropdown-toggle', dropDown);


                    //toolbox item clicked
                    $('#add-field').on("click", 'a', function (e) {
                        e.preventDefault();
                        _(fd.FormElementCollection()).each(function (f) {
                            f.isSelected(false);
                        });

                        // clone
                        var fe = ko.mapping.fromJS(ko.mapping.toJS(ko.dataFor(this)));
                        fe.isSelected = ko.observable(true);
                        fe.Label("Label " + fd.FormElementCollection().length);
                        fe.CssClass("");
                        fe.Visible("true");
                        fe.Enable("true");
                        fe.Size("input-large");
                        fe.ElementId(system.guid());

                        fd.FormElementCollection.push(fe);
                        vm.selectedFormElement(fe);


                    });

                    // kendoEditor
                    $('#template-form-designer').on('click', 'textarea', function () {
                        var $editor = $(this),
                            kendoEditor = $editor.data("kendoEditor");
                        if (!kendoEditor) {
                            var htmlElement = ko.dataFor(this),
                                editor = $editor.kendoEditor({
                                    change:function() {
                                        htmlElement.Text(this.value());
                                    }
                                }).data("kendoEditor");

                            htmlElement.Text.subscribe(function(t) {
                                editor.value(ko.unwrap(t));
                            });

                        }
                    }
                    );
                    $.getScript('/Scripts/jquery-ui-1.10.3.custom.min.js')// only contains UI core and interactions API
                        .done(function () {

                            var initDesigner = function () {
                                $('#template-form-designer>form').sortable({
                                    items: '>div',
                                    placeholder: 'ph',
                                    helper: 'original',
                                    dropOnEmpty: true,
                                    forcePlaceholderSize: true,
                                    forceHelperSize: false,
                                    receive: receive
                                });

                            },
                                receive = function (evt, ui) {
                                    var elements = _($('#template-form-designer>form>div')).map(function (div) {
                                        return ko.dataFor(div);
                                    });
                                    var fe = ko.dataFor(ui.item[0]);
                                    fe.isSelected = ko.observable(true);
                                    elements.splice(2, 0, fe);
                                    $('#template-form-designer>form').sortable("destroy");


                                    fd.FormElementCollection(elements);
                                };

                            initDesigner();
                            $('#add-field>ul>li').draggable({
                                helper: 'clone',
                                connectToSortable: "#template-form-designer>form"
                            });
                            vm.wd().isBusy(false);
                        });

                    $('section.context-action-panel').on('click', 'buton.close', function() {
                        $(this).parents('div.context-action').hide();
                    });
                },
                supportsHtml5Storage = function () {
                    try {
                        return 'localStorage' in window && window['localStorage'] !== null;
                    } catch (e) {
                        return false;
                    }
                },
                okClick = function (data, ev) {
                    if (bespoke.utils.form.checkValidity(ev.target)) {

                        var fd = ko.unwrap(vm.activity().FormDesign);
                        // get the sorted element
                        var elements = _($('#template-form-designer>form>div')).map(function (div) {
                            return ko.dataFor(div);
                        });
                        fd.FormElementCollection(elements);
                        dialog.close(this, "OK");
                        if (supportsHtml5Storage()) {
                            localStorage.removeItem(vm.activity().WebId());
                        }
                    }
                },
                cancelClick = function () {
                    if (supportsHtml5Storage()) {
                        localStorage.removeItem(vm.activity().WebId());
                    }
                    dialog.close(this, "Cancel");
                },
                selectFormElement = function (fe) {

                    var fd = ko.unwrap(vm.activity().FormDesign);
                    _(fd.FormElementCollection()).each(function (f) {
                        f.isSelected(false);
                    });
                    fe.isSelected(true);
                    vm.selectedFormElement(fe);
                    if (supportsHtml5Storage()) {
                        localStorage.setItem(vm.activity().WebId(), ko.mapping.toJSON(vm.activity));
                    }
                },
                removeFormElement = function (fe) {
                    var fd = ko.unwrap(vm.activity().FormDesign);
                    fd.FormElementCollection.remove(fe);
                },
                exportScreen = function() {
                    return eximp.exportJson(ko.unwrap(vm.activity().Name) + ".json", ko.mapping.toJSON(vm.activity));
                },
                open = function() {

                },
                importCommand = function() {
                    return eximp.importJson()
                 .done(function (json) {
                     try {

                         var obj = JSON.parse(json),
                             clone = context.toObservable(obj);

                         vm.activity().FormDesign(clone.FormDesign());

                     } catch (error) {
                         logger.logError('Fail template import tidak sah', error, this, true);
                     }
                 });
                };

            var vm = {
                attached: attached,
                activate: activate,
                formElements: ko.observableArray(),
                selectedFormElement: ko.observable(),
                selectFormElement : selectFormElement,
                removeFormElement : removeFormElement,
                activity: ko.observable(new bespoke.sph.domain.ScreenActivity()),
                wd : ko.observable(new bespoke.sph.domain.WorkflowDefinition(system.guid())),
                okClick: okClick,
                cancelClick: cancelClick,
                importCommand :importCommand,
                toolbar : {
                    commands :ko.observableArray([{
                        caption : 'Create Pull Request',
                        icon : 'fa fa-folder-open-o',
                        command : open
                    }
                    ]),
                    exportCommand : exportScreen
                }
            };

            vm.activity.subscribe(function(screen) {

                var cached = localStorage.getItem(screen.WebId());
                if (cached) {
                    app.showMessage("There's cached data in your local storage, do you want to restore this?", "Local storage", ["Yes", "No"])
                        .done(function(dr) {
                            if (dr === "Yes") {
                                var screen2 = context.toObservable(JSON.parse(cached)),
                                    fd2 = ko.unwrap(screen2.FormDesign);

                                _(fd2.FormElementCollection()).each(function(v) {
                                    v.isSelected = ko.observable(false);
                                });
                                if (typeof screen.FormDesign === "function") {
                                    screen.FormDesign(screen2.FormDesign());
                                } else {
                                    screen.FormDesign.FormElementCollection(screen2.FormDesign().FormElementCollection());
                                }

                                return;
                            }
                        });
                }

                var fd = ko.unwrap(screen.FormDesign);
                _(fd.FormElementCollection()).each(function(v) {
                    v.isSelected = ko.observable(false);
                });
            });


            return vm;

        });


</script>
