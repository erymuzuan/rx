@using Bespoke.Sph.Domain
@model Bespoke.Sph.Web.ViewModels.FormRendererViewModel

@{
    ViewBag.Title = "title";
    Layout = null;
    var ns = ConfigurationManager.ApplicationName.ToCamelCase() + "_" + this.Model.EntityDefinition.EntityDefinitionId;
    var typeCtor = string.Format("bespoke.{0}.domain.{1}({{WebId:'{2}'}})", ns, Model.EntityDefinition.Name, Guid.NewGuid());
    var typeName = string.Format("bespoke.{0}.domain.{1}", ns, Model.EntityDefinition.Name);
    var saveUrl = string.Format("/{0}/Save", @Model.EntityDefinition.Name);
    var codeNamespace = ConfigurationManager.ApplicationName + "_" + Model.EntityDefinition.EntityDefinitionId;
}

<h2>title</h2>
<script type="text/javascript" src="~/Scripts/knockout-3.0.0.debug.js"></script>
<script type="text/javascript" data-script="true">
    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router, objectbuilders.system, objectbuilders.app, objectbuilders.eximp, objectbuilders.dialog],
        function (context, logger, router, system, app, eximp, dialog) {

            var entity = ko.observable(new @Html.Raw(typeCtor)),
                activate = function (id) {
                    if (parseInt(id)) {
                        var query = String.format("@(Model.EntityDefinition.Name + "Id") eq {0}", id),
                            tcs = new $.Deferred();
                        context.loadOneAsync("@Model.EntityDefinition.Name", query)
                            .done(function(b) {
                                var item = context.toObservable(b,/Bespoke\.@codeNamespace\.Domain\.(.*?),/ );
                                entity(item);
                                tcs.resolve(true);
                            });

                        return tcs.promise();

                    }
                    return Task.fromResult(true);

                },
                attached = function (parameters) {

                },
                save = function() {
                    var tcs = new $.Deferred();
                    var data = ko.mapping.toJSON(entity);

                    context.post(data, "@saveUrl")
                        .then(function(result) {
                            tcs.resolve(result);
                        });
                    return tcs.promise();
                };

            return {
                activate: activate,
                attached: attached,
                entity: entity,
                save : save
            };
        });
</script>