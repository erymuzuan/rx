@using Bespoke.Sph.Domain
@model Bespoke.Sph.Web.ViewModels.FormRendererViewModel
@using Humanizer
@using Newtonsoft.Json

@{
    ViewBag.Title = "title";
    Layout = null;
    var ns = ConfigurationManager.ApplicationName.ToCamelCase() + "_" + this.Model.EntityDefinition.EntityDefinitionId;
    var typeCtor = string.Format("bespoke.{0}.domain.{1}({{WebId:system.guid()}})", ns, Model.EntityDefinition.Name);
    var typeName = string.Format("bespoke.{0}.domain.{1}", ns, Model.EntityDefinition.Name);
    var saveUrl = string.Format("/{0}/Save", @Model.EntityDefinition.Name);
    var validateUrl = string.Format("/Sph/BusinessRule/Validate/{0}?rules={1}", @Model.EntityDefinition.Name, string.Join(";", Model.Form.Rules.Select(r => r.Dehumanize())));
    var codeNamespace = ConfigurationManager.ApplicationName + "_" + Model.EntityDefinition.EntityDefinitionId;
    var commands = Model.Form.FormDesign.FormElementCollection.OfType<Button>()
        .Where(b => b.IsToolbarItem)
        .Select(b => string.Format("{{ caption :\"{0}\", command : {1}, icon:\"{2}\" }}", b.Label, b.CommandName, b.IconClass));
    var commandsJs = string.Format("[{0}]", string.Join(",", commands));


    var formId = @Model.Form.Route + "-form";
}

<h2>title</h2>
<script type="text/javascript" src="~/Scripts/knockout-3.0.0.debug.js"></script>
<script type="text/javascript" data-script="true">
    define([objectbuilders.datacontext, objectbuilders.logger, objectbuilders.router, objectbuilders.system, objectbuilders.validation, objectbuilders.eximp, objectbuilders.dialog],
        function (context, logger, router, system, validation, eximp, dialog) {

            var entity = ko.observable(new @Html.Raw(typeCtor)),
                form = ko.observable(new bespoke.sph.domain.EntityForm()),
                activate = function (id) {

                    var query = String.format("@(Model.EntityDefinition.Name + "Id") eq {0}", id),
                        tcs = new $.Deferred(),
                        itemTask = context.loadOneAsync("Customer", query),
                        formTask = context.loadOneAsync("EntityForm", "Route eq '@Model.Form.Route'");

                            $.when(itemTask, formTask).done(function(b,f) {  
                                if (b) {
                                    var item = context.toObservable(b, /Bespoke\.@codeNamespace\.Domain\.(.*?),/);
                                    entity(item);
                                } 
                                else {
                                    entity(new @Html.Raw(typeCtor));
                                }
                                form(f);
                                
                                tcs.resolve(true);
                            });

                        return tcs.promise();
                },
                attached = function (view) {
                    // validation
                    validation.init($('#@formId'), form());
                    
                },

                @foreach (var rule in Model.Form.Rules)
                {
                    var function = rule.Dehumanize();
                  <text>@function = function(){

                    var tcs = new $.Deferred(),
                        data = ko.mapping.toJSON(entity);

                    context.post(data, "/Sph/BusinessRule/Validate/@Model.EntityDefinition.Name?rules=@function" )
                        .then(function (result) {
                            tcs.resolve(result);
                        });
                    return tcs.promise();
                },</text>
                }
                @foreach (var btn in Model.Form.FormDesign.FormElementCollection.OfType<Button>())
                {
                    var function = btn.CommandName;
                  <text>@function = function(){
                    @Html.Raw(btn.Command)
                },</text>
                }
                save = function() {
                    if (!validation.valid()) {
                        return Task.fromResult(false);
                    }

                    var tcs = new $.Deferred(),
                        data = ko.mapping.toJSON(entity);

                    @if (Model.Form.Rules.Any())
                    {

                        <text>

                    context.post(data, "@validateUrl")
                        .then(function(result) {
                            if(result.success){
                                context.post(data, "@saveUrl")
                                   .then(function(result) {
                                       tcs.resolve(result);
                                   });
                            }else{
                                tcs.resolve(result);
                            }
                        });
                    </text>
                    }
                    else
                    {
                        <text>

                    context.post(data, "@saveUrl")
                        .then(function(result) {
                            tcs.resolve(result);
                        });
                    </text>
                    }

                    return tcs.promise();
                };

            return {
                @foreach (var rule in Model.Form.Rules)
                    {
                        var function = rule.Dehumanize();
                    <text>@function : @function,</text>
                    }
                activate: activate,
                attached: attached,
                entity: entity,
                save : save,
                toolbar : { 
                    @if (Model.Form.IsEmailAvailable)
                    {
                        <text>emailCommand : function(){
                        console.log("Sending email");
                        return Task.fromResult(true);
                    },</text>
                    }
                    @if (Model.Form.IsPrintAvailable)
                    {
                        <text>emailCommand :{},</text>
                    }
                    @if (Model.Form.IsAuditTrailAvailable)
                    {
                        <text>emailCommand :{},</text>
                    }
                    saveCommand : save,
                    commands : ko.observableArray(@Html.Raw(commandsJs))
                }
            };
        });
</script>