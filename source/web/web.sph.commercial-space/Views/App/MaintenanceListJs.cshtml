@model dynamic

@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" data-script="true">
    define(['services/mockMaintenanceContext'], function (context) {
        var isBusy = ko.observable(false),
            activate = function() {
                var query = String.format("MaintenanceId gt 0");
                var tcs = new $.Deferred();
                context.loadAsync("Maintenance", query)
                    .then(function(lo) {
                        isBusy(false);
                        vm.maintenances(lo.itemCollection);
                        tcs.resolve(true);
                    });
                return tcs.promise();
            },            
            viewAttached = function() {

                $('#status-option').on('click', 'button', function(e) {
                    var status = ko.dataFor(this);
                    vm.selectedStatus(status);
                });
            },

            assign = function() {
               var tcs = new $.Deferred();
               var data = ko.toJSON(vm.maintenances);
               isBusy(true);

               context.post(data, "/Maintenance/Assign")
                   .then(function (result) {
                       isBusy(false);
                       tcs.resolve(result);
                   });
               return tcs.promise();
            };


        var vm = {
            activate: activate,
            viewAttached: viewAttached,
            maintenances: ko.observableArray(),
            selectedStatus : ko.observable(),
            statusOptions : ko.observableArray(['New','Inspection', 'Maintenance']),
            assignCommand : assign
        };

        vm.selectedStatus.subscribe(function(status) {
            var query = String.format("Status eq '{0}'", status);
            var tcs = new $.Deferred();

            context.loadAsync("Maintenance", query)
                .then(function(lo) {
                    isBusy(false);
                    vm.maintenances(lo.itemCollection);
                    tcs.resolve(true);
                });
            return tcs.promise();

        });

        return vm;
    });
</script>
