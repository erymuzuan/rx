@using Newtonsoft.Json
@model Bespoke.Sph.Commerspace.Web.Controllers.AdminController
@{
    ViewBag.Title = "UsersJs";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var roles = Roles.GetAllRoles();
    
}

<script type="text/javascript" data-script="true">
    define(['services/datacontext','viewmodels/_users.role','viewmodels/_users.designation','viewmodels/_users.department'], function (context,rolevm,designationvm,departmentvm) {
        var isBusy = ko.observable(false),
            roles = @Html.Raw(JsonConvert.SerializeObject(roles)),
            profiles = ko.observableArray(),
            activate = function() {
                var query = String.format("UserProfileId gt 0");
                var tcs = new $.Deferred();
                loadDetails();
                var profileTask = context.loadAsync("UserProfile", query);
                var designationTask = context.getListAsync("Designation","DesignationId gt 0", "Name");
                var departmentTask = context.loadOneAsync("Setting", "Key eq 'Departments'");
                $.when(designationTask,profileTask,departmentTask)
                 .then(function(s,p,d) {
                     isBusy(false);
                     if (s) {
                         vm.designationOptions(s);
                     } 
                     if (d) {
                         var departments = JSON.parse(ko.mapping.toJS(d.Value));;
                         vm.departmentOptions(departments);
                     }
                        
                     vm.profiles(p.itemCollection);
                     tcs.resolve(true);
                 });
                return tcs.promise();
            },
            loadDetails = function() {
                rolevm.activate(roles);
                designationvm.activate(roles);
                departmentvm.activate();
            },
            add = function() {
                vm.profile();
            },
            edit = function(user) {
                vm.profile.FullName(user.FullName());
                vm.profile.UserName(user.Username());
                vm.profile.Email(user.Email());
                vm.profile.Designation(user.Designation());
                vm.profile.Department(user.Department());
            },
            save = function() {
                var tcs = new $.Deferred();
                var data = ko.mapping.toJSON({profile : vm.profile}) ;
                isBusy(true);

                context.post(data, "/Admin/AddUser")
                    .then(function(result) {
                        isBusy(false);
                        vm.profiles.push(result);
                        tcs.resolve(true);
                    });
                return tcs.promise();
            };
            

        var vm = {
            activate: activate,
            isBusyValidatingUserName : ko.observable(false),
            profile: {
                FullName : ko.observable(),
                UserName : ko.observable(),
                Email : ko.observable(),
                Password : ko.observable(),
                ConfirmPassword: ko.observable(''),
                Status : ko.observable(),
                Designation: ko.observable(),
                Department: ko.observable(),
                Telephone : ko.observable(),
                Mobile : ko.observable(),
                IsNew : ko.observable()
            },
            profiles: profiles,
            designationOptions : ko.observableArray(),
            departmentOptions : ko.observableArray(),
            userNameValidationStatus : ko.observable(),
            addCommand: add,
            editCommand: edit,
            saveCommand: save
        };


        vm.profile.UserName.subscribe(function(username) {
            vm.isBusyValidatingUserName(true);
            var tcs = new $.Deferred();
            var data = JSON.stringify({userName : username});
            isBusy(true);

            context.post(data, "/Admin/ValidateUserName")
                .then(function(result) {
                    isBusy(false);
                    vm.isBusyValidatingUserName(false);
                    if (result.status !== "OK") {
                        vm.userNameValidationStatus(result.message);
                    }
                    
                    tcs.resolve(result);
                });
            return tcs.promise();
        });
        return vm;
    });
</script>
