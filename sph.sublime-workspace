{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Web",
				"WebId"
			],
			[
				"Save",
				"SaveAsync"
			],
			[
				"Htt",
				"HttpUnauthorizedResult"
			],
			[
				"Wa",
				"WaitingAsync"
			],
			[
				"Ac",
				"ActivityExecutionStatus"
			],
			[
				"Stat",
				"Status"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/D/project/work/cycling/source/web/web.cycling/Views/Shared/_LayoutPage.cshtml",
			"settings":
			{
				"buffer_size": 5054,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/bespoke1/Documents/IISExpress/config/applicationhost.config",
			"settings":
			{
				"buffer_size": 100449,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Lucene.Net.Analysis;\nusing Lucene.Net.Index;\nusing Lucene.Net.QueryParsers;\nusing Lucene.Net.Search;\nusing Lucene.Net.Store;\nusing Lucene.Net.Store.Azure;\nusing Microsoft.WindowsAzure;\nusing Microsoft.WindowsAzure.Storage;\nusing Version = Lucene.Net.Util.Version;\n\nnamespace rxdocs.Models\n{\n    public class LuceneBlogEngine : IDisposable\n    {\n        private Analyzer m_analyzer;\n        private Directory m_directory;\n        private IndexSearcher m_searcher;\n        public string IndexDirectoryPath { set; get; }\n\n\n        public LuceneBlogEngine()\n        {\n            Initialized();\n        }\n\n        private void Initialized()\n        {\n            CloudStorageAccount cloudStorageAccount;\n            CloudStorageAccount.TryParse(CloudConfigurationManager.GetSetting(\"blobStorage\"), out cloudStorageAccount);\n            m_directory = new AzureDirectory(cloudStorageAccount, ConfigurationManager.LuceneIndex);\n\n            m_analyzer = new SimpleAnalyzer(); //StandardAnalyzer(Version.LUCENE_29);\n            if (null == m_searcher)\n                m_searcher = new IndexSearcher(m_directory, true);\n        }\n\n        public Task<Blog> LoadOneAsync(string route)\n        {\n            this.Initialized();\n            var query = new TermQuery(new Term(\"route\", route));\n            var docs = m_searcher.Search(query, 100);\n            var hits = docs.ScoreDocs;\n\n            int results = docs.TotalHits;\n            Debug.WriteLine(\"Found {0} results for {1}\", results, query);\n            var list = new List<Blog>();\n            for (var i = 0; i < results; i++)\n            {\n                if (i >= hits.Length) continue;\n                var doc = m_searcher.Doc(hits[i].Doc);\n                var score = hits[i].Score;\n                var content = doc.Get(\"content\");\n                DateTime date;\n                var blog = new Blog\n                {\n                    Score = score,\n                    Title = doc.Get(\"title\"),\n                    Summary = doc.Get(\"summary\"),\n                    Content = content,\n                    Tags = doc.GetValues(\"tags\"),\n                    Route = doc.Get(\"route\"),\n                    Author = doc.Get(\"author\"),\n                    Markdown = doc.Get(\"markdown\")\n\n                };\n                if (DateTime.TryParse(doc.Get(\"publisheddatetime_string\"), out date))\n                {\n                    blog.PublishedDateTime = date;\n                }\n\n                if (DateTime.TryParse(doc.Get(\"changeddatetime_string\"), out date))\n                {\n                    blog.ChangedDateTime = date;\n                }\n\n                list.Add(blog);\n            }\n\n            return Task.FromResult(list.FirstOrDefault());\n        }\n\n        public Task<IEnumerable<Blog>> SearchAsync(string text)\n        {\n            Debug.WriteLine(\"Searching....\");\n            Debug.WriteLine(text);\n            this.Initialized();\n\n\n            var parser = new QueryParser(Version.LUCENE_30, \"content\", m_analyzer);\n            var query = parser.Parse(text);\n\n            var sort = new Sort(new SortField(\"date\", SortField.LONG, true));\n            var filter = new QueryWrapperFilter(query);\n            //var docs = searcher.Search( query, filter, 100, sort )\n            var docs = m_searcher.Search(query, filter, 100, sort);\n            var hits = docs.ScoreDocs;\n\n            var results = docs.TotalHits;\n            Debug.WriteLine(\"Found {0} results for {1}\", results, query);\n            var list = new List<Blog>();\n            for (var i = 0; i < results; i++)\n            {\n                if (i >= hits.Length) continue;\n                var doc = m_searcher.Doc(hits[i].Doc);\n                var score = hits[i].Score;\n                DateTime date;\n                var blog = new Blog\n                {\n                    Score = score,\n                    Title = doc.Get(\"title\"),\n                    Summary = doc.Get(\"summary\"),\n                    Tags = doc.GetValues(\"tags\"),\n                    Route = doc.Get(\"route\")\n\n                };\n                if (DateTime.TryParse(doc.Get(\"dates\"), out date))\n                {\n                    blog.PublishedDateTime = date;\n                }\n\n                list.Add(blog);\n            }\n\n            return Task.FromResult(list.AsEnumerable());\n        }\n\n        public void Close()\n        {\n            if (null != m_searcher)\n            {\n                m_searcher.Dispose();\n            }\n            if (null != m_directory)\n            {\n                m_directory.Dispose();\n            }\n            if (null != m_analyzer)\n            {\n                m_analyzer.Close();\n\n            }\n\n            m_searcher = null;\n            m_directory = null;\n            m_analyzer = null;\n\n\n        }\n\n        //public static void DoStreamingSearch(Searcher searcher, Query query)\n        //{\n        //    Collector streamingHitCollector = new AnonymousClassCollector();\n        //    searcher.Search(query, streamingHitCollector);\n        //}\n\n\n\n\n        public void Dispose()\n        {\n            this.Close();\n        }\n    }\n}\n",
			"file": "/C/Users/bespoke1/Desktop/LuceneBlogEngine.cs",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 5226,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 58.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/bespoke1/AppData/Roaming/Microsoft/VisualStudio/12.0/ActivityLog.xml",
		"/C/project/work/sph/deployment/10282.md",
		"/C/project/work/sph/deployment/version.10284.json",
		"/C/project/work/sph/bin/sources/Patient.cs",
		"/D/temp/sph/version.json",
		"/D/temp/MiniBlog/Website/Web.config",
		"/C/project/work/sph/bin/web/docs/ParallelActivity.html",
		"/C/project/work/sph/restore-package.ps1",
		"/C/Users/bespoke1/Desktop/ddd.linq",
		"/C/project/work/sph/source/domain/domain.sph/Triggers/Activity.cs",
		"/C/project/work/sph/source/domain/domain.sph/Triggers/ScreenActivity.cs",
		"/C/project/work/sph/source/web/web.sph/SphApp/views/patient-details.html",
		"/C/project/work/sph/source/web/web.sph/SphApp/viewmodels/patient-details.js",
		"/C/project/work/sph/packages/Castle.Core.3.2.2/ASL - Apache Software Foundation License.txt",
		"/C/project/work/sph/source/web/web.sph/Controllers/WorkflowDefinitionController.cs",
		"/C/project/work/sph/source/web/web.sph/Views/Workflow/EditorTemplates/TextBox.cshtml",
		"/C/Users/itpro/AppData/Local/Temp/ipuuso0s.0.cs",
		"/D/temp/sph/Workflow_0_5.cs",
		"/D/temp/sph/Workflow_1_21.cs",
		"/D/temp/Workflow_1_5.cs",
		"/D/temp/Workflow_1_8.cs",
		"/D/temp/Workflow_1_13.cs",
		"/C/Users/bespoke1/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/bespoke1/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/bespoke1/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/project/work/sph/source/web/web.sph/App/partial/WorkflowDefinition.js",
		"/C/project/work/sph/source/web/web.sph/Views/Workflow/Start.cshtml"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"	AZROL	Resolved",
			"	Ruzzaima	Resolved",
			"	Ruzzaima	Closed",
			"	erymuzuan	Resolved",
			"	Shamsuriati Embi	Resolved",
			"cshtm",
			"col-lg",
			"this",
			"\n        public async override Task InitiateAsync(Workflow wf)\n        {\n          ",
			"indent",
			"tab",
			"<input.*class=\".*(form-control).*\"",
			"<input.*class=\".*^(?!.*?form-control).*\"",
			"<input.*class=\".*^(form-control).*\"",
			"<input.*class=\".*(form-control).*\"",
			"<input.*class=\".*form-control.*\"",
			"xxlarge",
			"<input.*form-control.*$",
			"<input.*?^f.*$",
			"<input class=\"input-xxlarge form-control\" data-bind=\"value: FiredOnOperations\" id=\"fired-on-operations\" type=\"text\" name=\"FireOnOperations\" />",
			"<input.*form-control.*$",
			"<input.*^(form-control)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			"col-md"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/D/project/work/cycling/source/web/web.cycling/Views/Shared/_LayoutPage.cshtml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5054,
						"regions":
						{
						},
						"selection":
						[
							[
								4656,
								4656
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 2544.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/bespoke1/Documents/IISExpress/config/applicationhost.config",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 100449,
						"regions":
						{
						},
						"selection":
						[
							[
								39792,
								39792
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 17440.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/bespoke1/Desktop/LuceneBlogEngine.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5226,
						"regions":
						{
						},
						"selection":
						[
							[
								1948,
								1917
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "sph.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"patient.",
				"bin\\sources\\Patient.cs"
			],
			[
				"pa-de",
				"source\\web\\web.sph\\SphApp\\views\\patient-details.html"
			],
			[
				"screea",
				"source\\domain\\domain.sph\\Triggers\\ScreenActivity.cs"
			],
			[
				"acti",
				"source\\domain\\domain.sph\\Triggers\\Activity.cs"
			],
			[
				"worde.js",
				"web/web.sph/App/partial/WorkflowDefinition.js"
			],
			[
				"workdec",
				"web/web.sph/Controllers/WorkflowDefinitionController.cs"
			],
			[
				"start",
				"web/web.sph/Views/Workflow/Start.cshtml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 263.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
